version: '3.8'

networks:
  smart-deploy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  qdrant_data:
  keycloak_data:

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smart-deploy-postgres
    environment:
      POSTGRES_DB: smart_deploy_monitor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Root@123
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - smart-deploy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smart-deploy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smart-deploy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Elasticsearch Search Engine
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: smart-deploy-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - smart-deploy-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: smart-deploy-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/data
    networks:
      - smart-deploy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Keycloak Identity Server
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: smart-deploy-keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin123
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/smart_deploy_monitor
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=Root@123
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HTTP_ENABLED=true
    ports:
      - "8081:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
    networks:
      - smart-deploy-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    command: ["start-dev"]

  # Spring Boot Application
  smart-deploy-monitor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smart-deploy-monitor-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/smart_deploy_monitor
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=Root@123
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_ELASTICSEARCH_REST_URIS=http://elasticsearch:9200
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smart-deploy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"