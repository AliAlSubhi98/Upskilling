type User {
    id: ID!
    email: String!
    firstName: String!
    lastName: String!
    role: UserRole!
    isActive: Boolean!
    createdAt: String!
    updatedAt: String!
}

enum UserRole {
    USER
    ADMIN
}

type UserConnection {
    edges: [UserEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type UserEdge {
    node: User!
    cursor: String!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

input CreateUserInput {
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    role: UserRole = USER
}

input UpdateUserInput {
    id: ID!
    email: String
    firstName: String
    lastName: String
    role: UserRole
    isActive: Boolean
}

input UserFilter {
    search: String
    role: UserRole
    isActive: Boolean
}

input UserSort {
    field: UserSortField!
    direction: SortDirection!
}

enum UserSortField {
    EMAIL
    FIRST_NAME
    LAST_NAME
    CREATED_AT
    UPDATED_AT
}

enum SortDirection {
    ASC
    DESC
}

type Query {
    user(id: ID!): User
    users(
        first: Int = 10
        after: String
        filter: UserFilter
        sort: UserSort
    ): UserConnection!
    userStats: UserStats!
}

type Mutation {
    createUser(input: CreateUserInput!): User!
    updateUser(input: UpdateUserInput!): User!
    deleteUser(id: ID!): Boolean!
}

type Subscription {
    userCreated: User!
    userUpdated: User!
    userDeleted: ID!
}

type UserStats {
    totalUsers: Int!
    activeUsers: Int!
    usersByRole: [RoleCount!]!
}

type RoleCount {
    role: UserRole!
    count: Int!
}
