{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Upskilling Journey","text":"<p>Welcome :) This site is my personal upskilling space, where I track my progress toward key backend, DevOps, and software engineering KPIs. Each section shows my current status and achievements as I work toward my goals.</p>"},{"location":"#progress-overview","title":"Progress Overview","text":"Topic Goal/Description Current Level Git &amp; GitHub Master version control &amp; collaboration Level 1 Project Management Understand dev project workflows Level 1 Communication &amp; Collaboration Improve team communication skills Level 1 Documentation Write and maintain clear docs Level 1 Containers &amp; Orchestration Deploy/manage containers &amp; clusters Level 1 Linux Confident Linux user/admin Level 1 CI/CD Automate build, test, deploy Level 1 Observability Monitor and troubleshoot systems Level 1 Redundancy &amp; DR Ensure system reliability &amp; recovery Level 1 Networking Understand and troubleshoot networks Level 1 Code + Design Patterns Apply proven coding/design techniques Level 1 Databases Use and optimize modern databases Level 1 System Design Architect scalable, robust systems Level 1 Security Build and maintain secure systems Level 1 API Design and implement robust APIs Level 1 Authentication &amp; Authorization Securely manage user access Level 1 Testing Confidently test and validate software Level 1"},{"location":"topics/API/","title":"API","text":"<p>Goal: Design and implement robust APIs.</p> <p>Current Level: Level 1</p>"},{"location":"topics/API/#level-1-api-basics","title":"Level 1: API Basics","text":"<ul> <li>Competencies: REST fundamentals, CRUD, status codes, documentation</li> <li>Tools: Postman, Swagger, curl</li> <li>Checklist:</li> <li>[ ] Build a simple REST API</li> <li>[ ] Use correct HTTP status codes</li> <li>[ ] Document endpoints with Swagger/OpenAPI</li> </ul>"},{"location":"topics/API/#level-2-advanced-rest-versioning","title":"Level 2: Advanced REST &amp; Versioning","text":"<ul> <li>Competencies: Filtering, pagination, versioning, error handling</li> <li>Tools: OpenAPI, API gateways, error tracking tools</li> <li>Checklist:</li> <li>[ ] Add filtering and pagination to endpoints</li> <li>[ ] Implement API versioning</li> <li>[ ] Standardize error responses</li> </ul>"},{"location":"topics/API/#level-3-security-auth","title":"Level 3: Security &amp; Auth","text":"<ul> <li>Competencies: Auth, rate limiting, CORS, input validation</li> <li>Tools: JWT, OAuth2, API keys, CORS middleware</li> <li>Checklist:</li> <li>[ ] Secure endpoints with JWT or API keys</li> <li>[ ] Set up CORS policies</li> <li>[ ] Validate and sanitize input</li> </ul>"},{"location":"topics/API/#level-4-api-gateways-monitoring","title":"Level 4: API Gateways &amp; Monitoring","text":"<ul> <li>Competencies: API gateways, analytics, monitoring, caching</li> <li>Tools: Kong, Apigee, Prometheus, Redis</li> <li>Checklist:</li> <li>[ ] Deploy an API gateway</li> <li>[ ] Monitor API usage and errors</li> <li>[ ] Cache responses for performance</li> </ul>"},{"location":"topics/API/#level-5-graphql-event-driven-apis","title":"Level 5: GraphQL &amp; Event-Driven APIs","text":"<ul> <li>Competencies: GraphQL, webhooks, async/event-driven APIs, gRPC</li> <li>Tools: Apollo, gRPC, webhook tools</li> <li>Checklist:</li> <li>[ ] Build a GraphQL or gRPC API</li> <li>[ ] Implement webhooks for async events</li> <li>[ ] Design an event-driven API</li> </ul>"},{"location":"topics/API/#resources","title":"Resources","text":"<ul> <li>RESTful API Design</li> <li>OpenAPI Specification</li> <li>Postman Learning Center</li> </ul>"},{"location":"topics/API/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Auth/","title":"Authentication &amp; Authorization","text":"<p>Goal: Securely manage user access and permissions.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Auth/#level-1-auth-basics","title":"Level 1: Auth Basics","text":"<ul> <li>Competencies: Password authentication, session management, basic user roles</li> <li>Tools: bcrypt, JWT, session cookies</li> <li>Checklist:</li> <li>[ ] Implement password-based login</li> <li>[ ] Use secure password hashing (e.g., bcrypt)</li> <li>[ ] Manage user sessions securely</li> </ul>"},{"location":"topics/Auth/#level-2-oauth-social-login","title":"Level 2: OAuth &amp; Social Login","text":"<ul> <li>Competencies: OAuth2, social login, token-based auth, refresh tokens</li> <li>Tools: OAuth2 libraries, Google/Facebook login, JWT</li> <li>Checklist:</li> <li>[ ] Add OAuth2 or social login to an app</li> <li>[ ] Use JWTs for stateless authentication</li> <li>[ ] Implement token refresh/expiry</li> </ul>"},{"location":"topics/Auth/#level-3-authorization-rbac","title":"Level 3: Authorization &amp; RBAC","text":"<ul> <li>Competencies: Role-based access control, permissions, scopes</li> <li>Tools: OPA, Casbin, Keycloak</li> <li>Checklist:</li> <li>[ ] Implement RBAC in an app</li> <li>[ ] Define and enforce permissions/scopes</li> <li>[ ] Use a policy engine (e.g., OPA, Casbin)</li> </ul>"},{"location":"topics/Auth/#level-4-advanced-auth-federation","title":"Level 4: Advanced Auth &amp; Federation","text":"<ul> <li>Competencies: SSO, SAML, OIDC, multi-factor auth, federation</li> <li>Tools: SAML, OIDC, Auth0, Okta, MFA tools</li> <li>Checklist:</li> <li>[ ] Set up SSO with SAML or OIDC</li> <li>[ ] Add multi-factor authentication</li> <li>[ ] Federate identity across systems</li> </ul>"},{"location":"topics/Auth/#level-5-enterprise-security-zero-trust","title":"Level 5: Enterprise Security &amp; Zero Trust","text":"<ul> <li>Competencies: Just-in-time access, secrets rotation, auditing, zero trust</li> <li>Tools: Identity-aware proxies, Vault, audit logging tools</li> <li>Checklist:</li> <li>[ ] Implement just-in-time access controls</li> <li>[ ] Automate secrets rotation</li> <li>[ ] Audit and monitor auth events</li> <li>[ ] Architect for zero trust</li> </ul>"},{"location":"topics/Auth/#resources","title":"Resources","text":"<ul> <li>OAuth 2.0 and OpenID Connect</li> <li>OWASP Authentication Cheat Sheet</li> <li>Keycloak Documentation</li> </ul>"},{"location":"topics/Auth/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/CI-CD/","title":"CI/CD","text":"<p>Goal: Automate build, test, and deployment pipelines.</p> <p>Current Level: Level 1</p>"},{"location":"topics/CI-CD/#level-1-cicd-fundamentals","title":"Level 1: CI/CD Fundamentals","text":"<ul> <li>Competencies: Basic build/test automation, simple pipelines</li> <li>Tools: GitHub Actions, GitLab CI, Jenkins, Travis CI</li> <li>Checklist:</li> <li>[ ] Set up a basic CI pipeline for build and test</li> <li>[ ] Run automated tests on every push</li> <li>[ ] Use a badge to show build status</li> </ul>"},{"location":"topics/CI-CD/#level-2-deployment-automation","title":"Level 2: Deployment Automation","text":"<ul> <li>Competencies: Automated deployments, environment variables, secrets</li> <li>Tools: Docker, Heroku, AWS CodePipeline, environment files</li> <li>Checklist:</li> <li>[ ] Automate deployment to a staging environment</li> <li>[ ] Use environment variables and secrets securely</li> <li>[ ] Roll back a deployment</li> </ul>"},{"location":"topics/CI-CD/#level-3-advanced-pipelines-quality-gates","title":"Level 3: Advanced Pipelines &amp; Quality Gates","text":"<ul> <li>Competencies: Multi-stage pipelines, code quality checks, artifact management</li> <li>Tools: SonarQube, Artifactory, multi-stage YAML pipelines</li> <li>Checklist:</li> <li>[ ] Add code quality checks to the pipeline</li> <li>[ ] Store and retrieve build artifacts</li> <li>[ ] Use multi-stage pipelines for build, test, deploy</li> </ul>"},{"location":"topics/CI-CD/#level-4-infrastructure-as-code-monitoring","title":"Level 4: Infrastructure as Code &amp; Monitoring","text":"<ul> <li>Competencies: IaC, pipeline monitoring, notifications, blue/green deploys</li> <li>Tools: Terraform, Ansible, Slack notifications, Prometheus</li> <li>Checklist:</li> <li>[ ] Deploy infrastructure using code</li> <li>[ ] Monitor pipeline health and send alerts</li> <li>[ ] Implement blue/green or canary deployments</li> </ul>"},{"location":"topics/CI-CD/#level-5-enterprise-cicd-compliance","title":"Level 5: Enterprise CI/CD &amp; Compliance","text":"<ul> <li>Competencies: Compliance, audit trails, self-hosted runners, scaling</li> <li>Tools: Vault, custom runners, compliance tools</li> <li>Checklist:</li> <li>[ ] Ensure compliance and auditability in pipelines</li> <li>[ ] Scale CI/CD infrastructure for large teams</li> <li>[ ] Use self-hosted runners for custom environments</li> </ul>"},{"location":"topics/CI-CD/#resources","title":"Resources","text":"<ul> <li>GitHub Actions Docs</li> <li>Jenkins User Documentation</li> <li>CI/CD with GitLab</li> </ul>"},{"location":"topics/CI-CD/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Code-Design-Patterns/","title":"Code + Design Patterns","text":"<p>Goal: Apply proven coding and design techniques.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Code-Design-Patterns/#level-1-coding-fundamentals","title":"Level 1: Coding Fundamentals","text":"<ul> <li>Competencies: Clean code, basic refactoring, naming conventions</li> <li>Tools: linters, Prettier, ESLint, gofmt</li> <li>Checklist:</li> <li>[ ] Refactor code for readability</li> <li>[ ] Use consistent naming conventions</li> <li>[ ] Run a linter on your codebase</li> </ul>"},{"location":"topics/Code-Design-Patterns/#level-2-common-patterns","title":"Level 2: Common Patterns","text":"<ul> <li>Competencies: Singleton, Factory, Observer, MVC</li> <li>Tools: Design pattern libraries, UML tools</li> <li>Checklist:</li> <li>[ ] Implement a singleton or factory pattern</li> <li>[ ] Use MVC in a small project</li> <li>[ ] Draw a UML diagram for a pattern</li> </ul>"},{"location":"topics/Code-Design-Patterns/#level-3-advanced-patterns-principles","title":"Level 3: Advanced Patterns &amp; Principles","text":"<ul> <li>Competencies: Dependency injection, SOLID, DRY, KISS, composition</li> <li>Tools: Dependency injection frameworks, code review tools</li> <li>Checklist:</li> <li>[ ] Apply SOLID principles in a project</li> <li>[ ] Use dependency injection in code</li> <li>[ ] Review code for DRY and KISS adherence</li> </ul>"},{"location":"topics/Code-Design-Patterns/#level-4-architectural-patterns","title":"Level 4: Architectural Patterns","text":"<ul> <li>Competencies: Microservices, event-driven, CQRS, hexagonal architecture</li> <li>Tools: Event buses, message queues, architecture diagrams</li> <li>Checklist:</li> <li>[ ] Design a microservices architecture</li> <li>[ ] Implement event-driven communication</li> <li>[ ] Document architecture with diagrams</li> </ul>"},{"location":"topics/Code-Design-Patterns/#level-5-enterprise-patterns-best-practices","title":"Level 5: Enterprise Patterns &amp; Best Practices","text":"<ul> <li>Competencies: Domain-driven design, testable architecture, scalability</li> <li>Tools: DDD tools, test frameworks, scalability testing tools</li> <li>Checklist:</li> <li>[ ] Apply DDD to a complex domain</li> <li>[ ] Ensure architecture is testable and scalable</li> <li>[ ] Use tools to test for scalability</li> </ul>"},{"location":"topics/Code-Design-Patterns/#resources","title":"Resources","text":"<ul> <li>Refactoring Guru</li> <li>Design Patterns: Elements of Reusable Object-Oriented Software</li> <li>Clean Code by Robert C. Martin</li> </ul>"},{"location":"topics/Code-Design-Patterns/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Communication-Collaboration/","title":"Communication &amp; Collaboration","text":"<p>Goal: Improve team communication and collaboration skills.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Communication-Collaboration/#level-1-communication-fundamentals","title":"Level 1: Communication Fundamentals","text":"<ul> <li>Competencies: Clear written communication, basic meeting etiquette, active listening</li> <li>Tools: Email, Slack, Teams, Google Meet</li> <li>Checklist:</li> <li>[ ] Write clear and concise emails/messages</li> <li>[ ] Participate in team meetings with basic etiquette</li> <li>[ ] Practice active listening in conversations</li> </ul>"},{"location":"topics/Communication-Collaboration/#level-2-team-collaboration","title":"Level 2: Team Collaboration","text":"<ul> <li>Competencies: Asynchronous updates, knowledge sharing, feedback culture</li> <li>Tools: Confluence, Google Docs, Standup bots</li> <li>Checklist:</li> <li>[ ] Share updates asynchronously with the team</li> <li>[ ] Contribute to shared documentation</li> <li>[ ] Give and receive constructive feedback</li> </ul>"},{"location":"topics/Communication-Collaboration/#level-3-conflict-resolution-facilitation","title":"Level 3: Conflict Resolution &amp; Facilitation","text":"<ul> <li>Competencies: Conflict resolution, facilitating meetings, inclusive communication</li> <li>Tools: Retrospective tools, Miro, Zoom breakout rooms</li> <li>Checklist:</li> <li>[ ] Help resolve a team conflict constructively</li> <li>[ ] Facilitate a team meeting or retrospective</li> <li>[ ] Ensure all voices are heard in discussions</li> </ul>"},{"location":"topics/Communication-Collaboration/#level-4-cross-team-collaboration","title":"Level 4: Cross-Team Collaboration","text":"<ul> <li>Competencies: Cross-team projects, stakeholder management, negotiation</li> <li>Tools: Jira, shared calendars, project management tools</li> <li>Checklist:</li> <li>[ ] Collaborate on a project with another team</li> <li>[ ] Manage stakeholder expectations</li> <li>[ ] Negotiate priorities or resources</li> </ul>"},{"location":"topics/Communication-Collaboration/#level-5-leadership-influence","title":"Level 5: Leadership &amp; Influence","text":"<ul> <li>Competencies: Mentoring, leading initiatives, organizational communication</li> <li>Tools: Mentoring platforms, company-wide forums, leadership training</li> <li>Checklist:</li> <li>[ ] Mentor or coach a team member</li> <li>[ ] Lead a cross-team initiative</li> <li>[ ] Communicate effectively at the organizational level</li> </ul>"},{"location":"topics/Communication-Collaboration/#resources","title":"Resources","text":"<ul> <li>Crucial Conversations Book</li> <li>Atlassian Team Playbook</li> <li>Google re:Work - Guide: Understand Team Effectiveness</li> </ul>"},{"location":"topics/Communication-Collaboration/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Containers-Orchestration/","title":"Containers &amp; Orchestration","text":"<p>Goal: Deploy and manage containers and orchestration platforms.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Containers-Orchestration/#level-1-container-basics","title":"Level 1: Container Basics","text":"<ul> <li>Competencies: Understand containers, images, Docker basics</li> <li>Tools: Docker, Docker Hub</li> <li>Checklist:</li> <li>[ ] Build and run a Docker container</li> <li>[ ] Pull images from Docker Hub</li> <li>[ ] Write a simple Dockerfile</li> </ul>"},{"location":"topics/Containers-Orchestration/#level-2-compose-multi-container-apps","title":"Level 2: Compose &amp; Multi-Container Apps","text":"<ul> <li>Competencies: Docker Compose, networking, volumes, environment variables</li> <li>Tools: Docker Compose</li> <li>Checklist:</li> <li>[ ] Define a multi-container app with Docker Compose</li> <li>[ ] Use volumes and networks in Compose</li> <li>[ ] Pass environment variables to containers</li> </ul>"},{"location":"topics/Containers-Orchestration/#level-3-orchestration-fundamentals","title":"Level 3: Orchestration Fundamentals","text":"<ul> <li>Competencies: Basic Kubernetes concepts, pods, services, deployments</li> <li>Tools: Kubernetes (kubectl, minikube, k3s)</li> <li>Checklist:</li> <li>[ ] Deploy an app to a local Kubernetes cluster</li> <li>[ ] Expose a service with Kubernetes</li> <li>[ ] Scale deployments up and down</li> </ul>"},{"location":"topics/Containers-Orchestration/#level-4-advanced-orchestration-cicd","title":"Level 4: Advanced Orchestration &amp; CI/CD","text":"<ul> <li>Competencies: Helm, secrets, config maps, rolling updates, health checks</li> <li>Tools: Helm, ArgoCD, Kustomize</li> <li>Checklist:</li> <li>[ ] Use Helm to manage Kubernetes apps</li> <li>[ ] Store secrets/configs securely in Kubernetes</li> <li>[ ] Implement rolling updates and health checks</li> </ul>"},{"location":"topics/Containers-Orchestration/#level-5-production-grade-operations","title":"Level 5: Production-Grade Operations","text":"<ul> <li>Competencies: Multi-cluster, service mesh, autoscaling, monitoring, security</li> <li>Tools: Istio, Linkerd, Prometheus, Grafana, OPA</li> <li>Checklist:</li> <li>[ ] Set up a service mesh for traffic management</li> <li>[ ] Implement autoscaling and resource limits</li> <li>[ ] Monitor and secure a production Kubernetes cluster</li> </ul>"},{"location":"topics/Containers-Orchestration/#resources","title":"Resources","text":"<ul> <li>Docker Documentation</li> <li>Kubernetes Official Docs</li> <li>Awesome Kubernetes</li> </ul>"},{"location":"topics/Containers-Orchestration/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Databases/","title":"Databases","text":"<p>Goal: Use and optimize modern databases.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Databases/#level-1-database-fundamentals","title":"Level 1: Database Fundamentals","text":"<ul> <li>Competencies: Relational vs NoSQL, basic CRUD, simple queries</li> <li>Tools: SQLite, MySQL, MongoDB, psql</li> <li>Checklist:</li> <li>[ ] Create and query a relational database</li> <li>[ ] Perform basic CRUD operations</li> <li>[ ] Use a NoSQL database for simple data</li> </ul>"},{"location":"topics/Databases/#level-2-schema-design-indexing","title":"Level 2: Schema Design &amp; Indexing","text":"<ul> <li>Competencies: Normalization, indexes, constraints, ER diagrams</li> <li>Tools: ERD tools, MySQL Workbench, MongoDB Compass</li> <li>Checklist:</li> <li>[ ] Design a normalized schema</li> <li>[ ] Add indexes and constraints</li> <li>[ ] Draw an ER diagram for a project</li> </ul>"},{"location":"topics/Databases/#level-3-transactions-performance","title":"Level 3: Transactions &amp; Performance","text":"<ul> <li>Competencies: ACID, transactions, query optimization, replication</li> <li>Tools: EXPLAIN, slow query logs, replication tools</li> <li>Checklist:</li> <li>[ ] Use transactions for data integrity</li> <li>[ ] Optimize queries for performance</li> <li>[ ] Set up replication for high availability</li> </ul>"},{"location":"topics/Databases/#level-4-advanced-data-modeling-scaling","title":"Level 4: Advanced Data Modeling &amp; Scaling","text":"<ul> <li>Competencies: Sharding, partitioning, denormalization, caching</li> <li>Tools: Redis, Memcached, sharding tools</li> <li>Checklist:</li> <li>[ ] Implement sharding or partitioning</li> <li>[ ] Use caching to improve performance</li> <li>[ ] Denormalize data for specific use cases</li> </ul>"},{"location":"topics/Databases/#level-5-distributed-cloud-databases","title":"Level 5: Distributed &amp; Cloud Databases","text":"<ul> <li>Competencies: Multi-region, distributed transactions, cloud DBs</li> <li>Tools: AWS RDS, Google Cloud Spanner, CockroachDB</li> <li>Checklist:</li> <li>[ ] Deploy a cloud-managed database</li> <li>[ ] Handle distributed transactions</li> <li>[ ] Design for multi-region data consistency</li> </ul>"},{"location":"topics/Databases/#resources","title":"Resources","text":"<ul> <li>SQLBolt</li> <li>MongoDB University</li> <li>Database Design - Stanford Online</li> </ul>"},{"location":"topics/Databases/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Deployment/","title":"\ud83d\ude80 GitHub Pages Deployment Guide using MkDocs","text":"<p>This guide walks you through: 1. Initial setup 2. Deploying to GitHub Pages 3. Updating content 4. Best practices</p>"},{"location":"topics/Deployment/#prerequisites","title":"\u2705 Prerequisites","text":"<ul> <li>Python \u2265 3.7 installed</li> <li>Git installed and configured</li> <li>A GitHub repository (public or GitHub Pro if private)</li> <li>MkDocs and Material theme installed</li> </ul> <p>Install requirements:</p> <pre><code>pip install mkdocs mkdocs-material\n</code></pre> <p>Optional plugins (recommended):</p> <pre><code>pip install mkdocs-git-revision-date-localized\n</code></pre>"},{"location":"topics/Deployment/#1-project-structure","title":"\ud83c\udfd7\ufe0f 1. Project Structure","text":"<p>Your repo structure should look like this:</p> <pre><code>Upskilling/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 topics/\n\u2502   \u2502   \u251c\u2500\u2500 Git-GitHub.md\n\u2502   \u2502   \u251c\u2500\u2500 CI-CD.md\n\u251c\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"topics/Deployment/#2-mkdocsyml-example","title":"\u2699\ufe0f 2. <code>mkdocs.yml</code> Example","text":"<pre><code>site_name: Upskilling Journey\nsite_description: My curated docs for backend, DevOps, system design &amp; beyond.\nsite_url: https://AliAlSubhi98.github.io/Upskilling/\nrepo_url: https://github.com/AliAlSubhi98/Upskilling\nrepo_name: GitHub\n\ntheme:\n  name: material\n  features:\n    - navigation.sections\n    - navigation.indexes\n    - content.code.copy\n    - content.action.edit\n    - search.highlight\n    - search.share\n  palette:\n    - scheme: default\n      primary: blue\n      accent: deep purple\n    - scheme: slate\n      primary: blue\n      accent: deep purple\n      toggle:\n        icon: material/weather-night\n        name: Switch to dark mode\n  icon:\n    repo: fontawesome/brands/github\n\nnav:\n  - Home: index.md\n  - Git &amp; GitHub: topics/Git-GitHub.md\n  - CI/CD: topics/CI-CD.md\n  - Deployment Guide: Deployment.md\n\nmarkdown_extensions:\n  - toc:\n      permalink: true\n  - admonition\n  - codehilite\n  - pymdownx.superfences\n\nplugins:\n  - search\n  # Optional if installed\n  # - git-revision-date-localized:\n  #     fallback_to_build_date: true\n</code></pre>"},{"location":"topics/Deployment/#3-initial-deployment-to-github-pages","title":"\ud83d\ude80 3. Initial Deployment to GitHub Pages","text":""},{"location":"topics/Deployment/#step-a-initialize-and-push-repo","title":"Step A: Initialize and Push Repo","text":"<pre><code>git init\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add origin https://github.com/AliAlSubhi98/Upskilling.git\ngit push -u origin main\n</code></pre>"},{"location":"topics/Deployment/#step-b-build-the-site","title":"Step B: Build the Site","text":"<pre><code>mkdocs build\n</code></pre>"},{"location":"topics/Deployment/#step-c-deploy-to-github-pages","title":"Step C: Deploy to GitHub Pages","text":"<pre><code>mkdocs gh-deploy\n</code></pre> <p>You will be prompted for GitHub credentials. Use a personal access token (PAT) instead of password.</p>"},{"location":"topics/Deployment/#4-enable-github-pages-in-repository","title":"\ud83c\udf10 4. Enable GitHub Pages in Repository","text":"<p>Go to: <code>https://github.com/AliAlSubhi98/Upskilling/settings/pages</code></p> <ul> <li>Source: Select <code>gh-pages</code> branch</li> <li>Directory: <code>/ (root)</code></li> <li>Save \u2705</li> </ul>"},{"location":"topics/Deployment/#5-how-to-update-the-docs","title":"\u270f\ufe0f 5. How to Update the Docs","text":"<ol> <li>Edit or add Markdown files under <code>docs/</code></li> <li>Run:</li> </ol> <pre><code>mkdocs build\nmkdocs gh-deploy\n</code></pre> <ol> <li>Changes will appear live at the GitHub Pages URL.</li> </ol>"},{"location":"topics/Deployment/#optional-cleanup","title":"\ud83e\uddfc Optional Cleanup","text":"<pre><code>mkdocs build --clean\nmkdocs serve  # for local preview\n</code></pre>"},{"location":"topics/Deployment/#best-practices","title":"\ud83d\udee1\ufe0f Best Practices","text":"<ul> <li>Commit changes regularly</li> <li>Use clear folder structure (<code>docs/topics/...</code>)</li> <li>Don't push <code>site/</code></li> <li>Add <code>site/</code> to <code>.gitignore</code></li> <li>Store secrets in <code>.env</code> and ignore them</li> </ul>"},{"location":"topics/Documentation/","title":"Documentation","text":"<p>Goal: Write and maintain clear, effective documentation.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Documentation/#level-1-documentation-basics","title":"Level 1: Documentation Basics","text":"<ul> <li>Competencies: Writing README files, basic Markdown, documenting code usage</li> <li>Tools: Markdown, GitHub README, Google Docs</li> <li>Checklist:</li> <li>[ ] Write a clear project README</li> <li>[ ] Document code usage and examples</li> <li>[ ] Use basic Markdown formatting</li> </ul>"},{"location":"topics/Documentation/#level-2-structured-docs-standards","title":"Level 2: Structured Docs &amp; Standards","text":"<ul> <li>Competencies: API docs, docstrings, templates, style guides</li> <li>Tools: Sphinx, JSDoc, OpenAPI/Swagger, Confluence</li> <li>Checklist:</li> <li>[ ] Add docstrings/comments to functions and classes</li> <li>[ ] Create API documentation using a standard tool</li> <li>[ ] Follow a documentation style guide</li> </ul>"},{"location":"topics/Documentation/#level-3-collaborative-living-docs","title":"Level 3: Collaborative &amp; Living Docs","text":"<ul> <li>Competencies: Collaborative editing, versioned docs, changelogs, diagrams</li> <li>Tools: Google Docs, Notion, Mermaid, PlantUML</li> <li>Checklist:</li> <li>[ ] Collaborate on docs with teammates</li> <li>[ ] Maintain a changelog for your project</li> <li>[ ] Add diagrams to explain architecture or flows</li> </ul>"},{"location":"topics/Documentation/#level-4-automation-publishing","title":"Level 4: Automation &amp; Publishing","text":"<ul> <li>Competencies: Automated doc generation, publishing, continuous documentation</li> <li>Tools: MkDocs, Read the Docs, GitHub Pages, CI/CD integration</li> <li>Checklist:</li> <li>[ ] Automate documentation builds and publishing</li> <li>[ ] Host docs online for easy access</li> <li>[ ] Integrate doc updates into CI/CD pipeline</li> </ul>"},{"location":"topics/Documentation/#level-5-documentation-as-a-product","title":"Level 5: Documentation as a Product","text":"<ul> <li>Competencies: User guides, onboarding, localization, feedback loops</li> <li>Tools: Helpdesk platforms, translation tools, analytics</li> <li>Checklist:</li> <li>[ ] Create user guides or onboarding docs</li> <li>[ ] Localize documentation for multiple languages</li> <li>[ ] Collect and act on user feedback for docs</li> </ul>"},{"location":"topics/Documentation/#resources","title":"Resources","text":"<ul> <li>Google Technical Writing Courses</li> <li>Di\u00e1taxis Documentation Framework</li> <li>Write the Docs Community</li> </ul>"},{"location":"topics/Documentation/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Git-GitHub/","title":"Git &amp; GitHub","text":"<p>Goal: Master version control and collaboration using Git and GitHub.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Git-GitHub/#level-1-git-basics","title":"Level 1: Git Basics","text":"<ul> <li>Competencies: Init, Clone, Add, Commit, Push, Pull, Branching</li> <li>Commands: <code>git init</code>, <code>git clone</code>, <code>git add</code>, <code>git commit</code>, <code>git push</code>, <code>git pull</code>, <code>.gitignore</code></li> <li>Checklist:</li> <li>[ ] Create a new repo and push to GitHub</li> <li>[ ] Clone a repo and make your first commit</li> <li>[ ] Use .gitignore to exclude files</li> </ul>"},{"location":"topics/Git-GitHub/#level-2-advanced-branching-merging","title":"Level 2: Advanced Branching &amp; Merging","text":"<ul> <li>Competencies: Fast-Forward Merges, Three-Way Merges, Rebasing, Merge Conflicts, PRs</li> <li>Commands: <code>git branch</code>, <code>git checkout -b</code>, <code>git rebase</code>, <code>git merge</code>, <code>git cherry-pick</code>, GitHub PRs</li> <li>Checklist:</li> <li>[ ] Create feature branches and merge using both merge and rebase</li> <li>[ ] Resolve complex merge conflicts</li> <li>[ ] Use git cherry-pick to selectively move commits across branches</li> </ul>"},{"location":"topics/Git-GitHub/#level-3-commit-history-recovery","title":"Level 3: Commit History &amp; Recovery","text":"<ul> <li>Competencies: Reflog, Reset, Revert, Bisect, Tagging</li> <li>Commands: <code>git reflog</code>, <code>git reset --hard</code>, <code>git revert</code>, <code>git bisect</code>, <code>git tag</code></li> <li>Checklist:</li> <li>[ ] Recover lost commits using reflog</li> <li>[ ] Use git bisect to find a bug in commit history</li> <li>[ ] Reset changes safely without losing work</li> </ul>"},{"location":"topics/Git-GitHub/#level-4-enterprise-gitops-security","title":"Level 4: Enterprise GitOps &amp; Security","text":"<ul> <li>Competencies: Protected Branches, Signed Commits, CI/CD, LFS, GitHub Actions</li> <li>Commands: <code>git commit -S</code>, git lfs, GitHub Actions, Protected Branch Policies</li> <li>Checklist:</li> <li>[ ] Enforce signed commits for security</li> <li>[ ] Set up GitHub Actions for automated testing</li> <li>[ ] Implement branch protection rules to enforce workflow policies</li> </ul>"},{"location":"topics/Git-GitHub/#level-5-deep-git-internals-large-scale-gitops","title":"Level 5: Deep Git Internals &amp; Large-Scale GitOps","text":"<ul> <li>Competencies: Custom Hooks, Packfiles, GitHub API, Large Repos</li> <li>Commands: <code>git fsck</code>, <code>git worktree</code>, <code>git gc</code>, <code>git filter-branch</code>, GitHub API</li> <li>Checklist:</li> <li>[ ] Optimize a large repository using git gc and repack</li> <li>[ ] Write a custom Git hook for automated commit checks</li> <li>[ ] Use the GitHub GraphQL API to automate repo management</li> </ul>"},{"location":"topics/Git-GitHub/#resources","title":"Resources","text":"<ul> <li>Pro Git Book</li> <li>GitHub Docs</li> <li>Atlassian Git Tutorials</li> </ul>"},{"location":"topics/Git-GitHub/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Linux/","title":"Linux","text":"<p>Goal: Become a confident Linux user and administrator.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Linux/#level-1-linux-basics","title":"Level 1: Linux Basics","text":"<ul> <li>Competencies: Basic shell commands, file navigation, permissions</li> <li>Tools: Bash, zsh, ls, cd, cp, mv, rm, chmod, chown</li> <li>Checklist:</li> <li>[ ] Navigate directories and list files</li> <li>[ ] Copy, move, and delete files</li> <li>[ ] Change file permissions and ownership</li> </ul>"},{"location":"topics/Linux/#level-2-scripting-package-management","title":"Level 2: Scripting &amp; Package Management","text":"<ul> <li>Competencies: Shell scripting, environment variables, package managers</li> <li>Tools: Bash scripting, apt, yum, brew, nano, vim</li> <li>Checklist:</li> <li>[ ] Write a basic shell script</li> <li>[ ] Install and update packages</li> <li>[ ] Edit files with nano or vim</li> </ul>"},{"location":"topics/Linux/#level-3-processes-networking","title":"Level 3: Processes &amp; Networking","text":"<ul> <li>Competencies: Process management, system monitoring, networking basics</li> <li>Tools: ps, top, htop, netstat, ifconfig, systemctl</li> <li>Checklist:</li> <li>[ ] Monitor running processes</li> <li>[ ] Start and stop system services</li> <li>[ ] Check network interfaces and open ports</li> </ul>"},{"location":"topics/Linux/#level-4-advanced-administration","title":"Level 4: Advanced Administration","text":"<ul> <li>Competencies: Users/groups, cron jobs, disk management, SSH</li> <li>Tools: useradd, groupadd, crontab, df, du, ssh, scp</li> <li>Checklist:</li> <li>[ ] Manage users and groups</li> <li>[ ] Schedule tasks with cron</li> <li>[ ] Use SSH and SCP for remote access and file transfer</li> </ul>"},{"location":"topics/Linux/#level-5-security-automation","title":"Level 5: Security &amp; Automation","text":"<ul> <li>Competencies: Hardening, firewalls, automation, troubleshooting</li> <li>Tools: ufw, iptables, fail2ban, Ansible, log files</li> <li>Checklist:</li> <li>[ ] Configure a firewall (ufw or iptables)</li> <li>[ ] Automate tasks with Ansible or scripts</li> <li>[ ] Troubleshoot and analyze system logs</li> </ul>"},{"location":"topics/Linux/#resources","title":"Resources","text":"<ul> <li>Linux Journey</li> <li>The Linux Command Line Book</li> <li>Explainshell</li> </ul>"},{"location":"topics/Linux/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Networking/","title":"Networking","text":"<p>Goal: Understand and troubleshoot computer networks.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Networking/#level-1-networking-basics","title":"Level 1: Networking Basics","text":"<ul> <li>Competencies: OSI model, IP addressing, basic troubleshooting</li> <li>Tools: ping, traceroute, ipconfig/ifconfig</li> <li>Checklist:</li> <li>[ ] Explain the OSI model layers</li> <li>[ ] Use ping and traceroute to test connectivity</li> <li>[ ] Check and configure IP addresses</li> </ul>"},{"location":"topics/Networking/#level-2-routing-switching","title":"Level 2: Routing &amp; Switching","text":"<ul> <li>Competencies: Subnetting, routing tables, VLANs, NAT</li> <li>Tools: netstat, route, Wireshark</li> <li>Checklist:</li> <li>[ ] Subnet a network and assign IPs</li> <li>[ ] Analyze routing tables</li> <li>[ ] Capture and inspect packets with Wireshark</li> </ul>"},{"location":"topics/Networking/#level-3-protocols-security","title":"Level 3: Protocols &amp; Security","text":"<ul> <li>Competencies: TCP/UDP, DNS, DHCP, firewalls, VPNs</li> <li>Tools: dig, nslookup, firewall-cmd, OpenVPN</li> <li>Checklist:</li> <li>[ ] Troubleshoot DNS and DHCP issues</li> <li>[ ] Configure a basic firewall</li> <li>[ ] Set up a VPN connection</li> </ul>"},{"location":"topics/Networking/#level-4-advanced-networking","title":"Level 4: Advanced Networking","text":"<ul> <li>Competencies: Load balancing, proxying, IPv6, network automation</li> <li>Tools: HAProxy, NGINX, Ansible, tcpdump</li> <li>Checklist:</li> <li>[ ] Configure a load balancer</li> <li>[ ] Set up a reverse proxy</li> <li>[ ] Automate network tasks with Ansible</li> </ul>"},{"location":"topics/Networking/#level-5-enterprise-cloud-networking","title":"Level 5: Enterprise &amp; Cloud Networking","text":"<ul> <li>Competencies: SDN, cloud VPCs, multi-region, network monitoring</li> <li>Tools: AWS VPC, Azure VNets, SDN controllers, NetFlow</li> <li>Checklist:</li> <li>[ ] Design a multi-region cloud network</li> <li>[ ] Monitor network traffic at scale</li> <li>[ ] Implement SDN in a virtualized environment</li> </ul>"},{"location":"topics/Networking/#resources","title":"Resources","text":"<ul> <li>Cisco Networking Basics</li> <li>AWS Networking Fundamentals</li> <li>Wireshark User Guide</li> </ul>"},{"location":"topics/Networking/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Observability/","title":"Observability","text":"<p>Goal: Monitor and troubleshoot systems effectively.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Observability/#level-1-monitoring-basics","title":"Level 1: Monitoring Basics","text":"<ul> <li>Competencies: Uptime checks, basic metrics, simple dashboards</li> <li>Tools: UptimeRobot, Grafana, Prometheus, basic logging</li> <li>Checklist:</li> <li>[ ] Set up uptime monitoring for a service</li> <li>[ ] Create a simple dashboard for key metrics</li> <li>[ ] Collect and view basic logs</li> </ul>"},{"location":"topics/Observability/#level-2-application-metrics-alerts","title":"Level 2: Application Metrics &amp; Alerts","text":"<ul> <li>Competencies: Custom metrics, alerting, log aggregation</li> <li>Tools: Prometheus, Alertmanager, Loki, ELK stack</li> <li>Checklist:</li> <li>[ ] Instrument code with custom metrics</li> <li>[ ] Set up alerts for error conditions</li> <li>[ ] Aggregate logs from multiple services</li> </ul>"},{"location":"topics/Observability/#level-3-distributed-tracing-slos","title":"Level 3: Distributed Tracing &amp; SLOs","text":"<ul> <li>Competencies: Tracing, service maps, SLOs, error budgets</li> <li>Tools: Jaeger, Zipkin, OpenTelemetry, Sentry</li> <li>Checklist:</li> <li>[ ] Implement distributed tracing</li> <li>[ ] Define and track service level objectives (SLOs)</li> <li>[ ] Use error budgets to guide reliability work</li> </ul>"},{"location":"topics/Observability/#level-4-advanced-observability-automation","title":"Level 4: Advanced Observability &amp; Automation","text":"<ul> <li>Competencies: Automated remediation, anomaly detection, runbooks</li> <li>Tools: PagerDuty, Opsgenie, ML-based alerting</li> <li>Checklist:</li> <li>[ ] Set up automated incident response</li> <li>[ ] Use anomaly detection for alerts</li> <li>[ ] Maintain runbooks for common issues</li> </ul>"},{"location":"topics/Observability/#level-5-observability-at-scale","title":"Level 5: Observability at Scale","text":"<ul> <li>Competencies: Multi-region, high-cardinality data, custom pipelines</li> <li>Tools: Thanos, Cortex, custom observability platforms</li> <li>Checklist:</li> <li>[ ] Aggregate metrics/logs across regions</li> <li>[ ] Handle high-cardinality data efficiently</li> <li>[ ] Build custom observability pipelines</li> </ul>"},{"location":"topics/Observability/#resources","title":"Resources","text":"<ul> <li>Prometheus Docs</li> <li>Grafana Labs Tutorials</li> <li>OpenTelemetry</li> </ul>"},{"location":"topics/Observability/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Project-Management/","title":"Project Management","text":"<p>Goal: Understand and apply project management basics for developers.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Project-Management/#level-1-fundamentals","title":"Level 1: Fundamentals","text":"<ul> <li>Competencies: Task breakdown, basic prioritization, time tracking</li> <li>Tools: Trello, Jira, Asana, GitHub Projects</li> <li>Checklist:</li> <li>[ ] Break down a feature into tasks</li> <li>[ ] Prioritize tasks for a sprint</li> <li>[ ] Track progress using a project board</li> </ul>"},{"location":"topics/Project-Management/#level-2-team-communication-status","title":"Level 2: Team Communication &amp; Status","text":"<ul> <li>Competencies: Basic team communication, standups, asynchronous updates</li> <li>Tools: Slack, Teams, Email, Standup bots</li> <li>Checklist:</li> <li>[ ] Participate in daily standups</li> <li>[ ] Provide asynchronous status updates</li> <li>[ ] Use a team chat tool for collaboration</li> </ul>"},{"location":"topics/Project-Management/#level-3-feedback-retrospectives","title":"Level 3: Feedback &amp; Retrospectives","text":"<ul> <li>Competencies: Writing clear PRs, giving &amp; receiving feedback, meeting etiquette</li> <li>Tools: GitHub/GitLab PRs, Confluence, Google Docs</li> <li>Checklist:</li> <li>[ ] Write a clear pull request description</li> <li>[ ] Give constructive feedback in code reviews</li> <li>[ ] Participate in a sprint retrospective</li> </ul>"},{"location":"topics/Project-Management/#level-4-estimation-planning","title":"Level 4: Estimation &amp; Planning","text":"<ul> <li>Competencies: Risk management, dependency handling, backlog grooming, advanced estimation</li> <li>Tools: Planning poker, Jira advanced features, Gantt charts</li> <li>Checklist:</li> <li>[ ] Estimate tasks using story points or time</li> <li>[ ] Identify and manage dependencies</li> <li>[ ] Groom the backlog for an upcoming sprint</li> </ul>"},{"location":"topics/Project-Management/#level-5-leadership-strategy","title":"Level 5: Leadership &amp; Strategy","text":"<ul> <li>Competencies: Strategic roadmaps, metrics-driven decisions, developer advocacy</li> <li>Tools: Roadmap tools, OKRs, KPI dashboards</li> <li>Checklist:</li> <li>[ ] Contribute to a team or project roadmap</li> <li>[ ] Use metrics to drive process improvements</li> <li>[ ] Advocate for developer best practices</li> </ul>"},{"location":"topics/Project-Management/#resources","title":"Resources","text":"<ul> <li>Atlassian Agile Coach</li> <li>Scrum Guide</li> <li>Trello Getting Started</li> </ul>"},{"location":"topics/Project-Management/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Redundancy-DR/","title":"Redundancy &amp; DR","text":"<p>Goal: Ensure system reliability and disaster recovery.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Redundancy-DR/#level-1-backup-basics","title":"Level 1: Backup Basics","text":"<ul> <li>Competencies: Manual backups, basic restore, local redundancy</li> <li>Tools: rsync, tar, cloud storage (Google Drive, Dropbox)</li> <li>Checklist:</li> <li>[ ] Perform a manual backup of important data</li> <li>[ ] Restore data from a backup</li> <li>[ ] Use local redundancy (RAID1, mirrored disks)</li> </ul>"},{"location":"topics/Redundancy-DR/#level-2-automated-backups-monitoring","title":"Level 2: Automated Backups &amp; Monitoring","text":"<ul> <li>Competencies: Scheduled backups, backup monitoring, offsite storage</li> <li>Tools: cron, backup scripts, AWS S3, backup monitoring tools</li> <li>Checklist:</li> <li>[ ] Schedule automated backups</li> <li>[ ] Monitor backup success/failure</li> <li>[ ] Store backups offsite or in the cloud</li> </ul>"},{"location":"topics/Redundancy-DR/#level-3-disaster-recovery-planning","title":"Level 3: Disaster Recovery Planning","text":"<ul> <li>Competencies: DR plans, RTO/RPO, failover testing</li> <li>Tools: DR runbooks, failover scripts, cloud DR tools</li> <li>Checklist:</li> <li>[ ] Create a disaster recovery plan</li> <li>[ ] Define RTO (Recovery Time Objective) and RPO (Recovery Point Objective)</li> <li>[ ] Test failover and recovery procedures</li> </ul>"},{"location":"topics/Redundancy-DR/#level-4-high-availability-replication","title":"Level 4: High Availability &amp; Replication","text":"<ul> <li>Competencies: Active/passive, active/active, replication, load balancing</li> <li>Tools: HAProxy, database replication, cloud load balancers</li> <li>Checklist:</li> <li>[ ] Set up high availability for a service</li> <li>[ ] Implement database replication</li> <li>[ ] Use load balancing for redundancy</li> </ul>"},{"location":"topics/Redundancy-DR/#level-5-enterprise-resilience","title":"Level 5: Enterprise Resilience","text":"<ul> <li>Competencies: Multi-region, chaos engineering, automated DR</li> <li>Tools: Chaos Monkey, multi-region cloud, automated failover</li> <li>Checklist:</li> <li>[ ] Design for multi-region redundancy</li> <li>[ ] Practice chaos engineering to test resilience</li> <li>[ ] Automate disaster recovery processes</li> </ul>"},{"location":"topics/Redundancy-DR/#resources","title":"Resources","text":"<ul> <li>AWS Disaster Recovery Whitepaper</li> <li>Google SRE Book - Chapter 12: Disaster Recovery</li> <li>Backblaze Blog: Backup Strategies</li> </ul>"},{"location":"topics/Redundancy-DR/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Security/","title":"Security","text":"<p>Goal: Build and maintain secure systems.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Security/#level-1-basic-security","title":"Level 1: Basic Security","text":"<ul> <li>Competencies: HTTPS, input validation, password storage, secrets management</li> <li>Tools: Let's Encrypt, bcrypt, .env files</li> <li>Checklist:</li> <li>[ ] Enable HTTPS with valid TLS cert</li> <li>[ ] Validate user input</li> <li>[ ] Store passwords securely (e.g., bcrypt)</li> <li>[ ] No secrets in code/repos</li> </ul>"},{"location":"topics/Security/#level-2-secure-development-practices","title":"Level 2: Secure Development Practices","text":"<ul> <li>Competencies: OWASP Top 10, RBAC, rate limiting, dependency scanning</li> <li>Tools: ZAP, Snyk, Dependabot, Vault</li> <li>Checklist:</li> <li>[ ] Protect against OWASP Top 10</li> <li>[ ] Implement RBAC</li> <li>[ ] Set up rate limiting</li> <li>[ ] Use a secrets management system</li> <li>[ ] Scan dependencies for vulnerabilities</li> </ul>"},{"location":"topics/Security/#level-3-threat-modeling-secure-sdlc","title":"Level 3: Threat Modeling &amp; Secure SDLC","text":"<ul> <li>Competencies: Threat modeling, SAST/DAST, centralized auth, auditing</li> <li>Tools: Keycloak, OPA, GoSec, ZAP</li> <li>Checklist:</li> <li>[ ] Perform threat modeling</li> <li>[ ] Integrate security testing in CI/CD</li> <li>[ ] Use centralized auth (OAuth2, OIDC)</li> <li>[ ] Log/audit sensitive operations</li> </ul>"},{"location":"topics/Security/#level-4-continuous-security-monitoring","title":"Level 4: Continuous Security &amp; Monitoring","text":"<ul> <li>Competencies: Log aggregation, alerting, WAF, token security, incident response</li> <li>Tools: Loki, Grafana, Cloudflare WAF, Falco</li> <li>Checklist:</li> <li>[ ] Aggregate logs centrally</li> <li>[ ] Set up real-time alerting</li> <li>[ ] Use a WAF</li> <li>[ ] Implement token expiry/rotation</li> <li>[ ] Document security incidents</li> </ul>"},{"location":"topics/Security/#level-5-zero-trust-offensive-readiness","title":"Level 5: Zero Trust &amp; Offensive Readiness","text":"<ul> <li>Competencies: Zero Trust, red teaming, secrets rotation, anomaly detection</li> <li>Tools: Istio, Tailscale, OPA, Burp Suite</li> <li>Checklist:</li> <li>[ ] Architect for Zero Trust</li> <li>[ ] Run penetration tests</li> <li>[ ] Automate secrets rotation</li> <li>[ ] Use AI/ML for anomaly detection</li> </ul>"},{"location":"topics/Security/#resources","title":"Resources","text":"<ul> <li>OWASP Top 10</li> <li>Google Security Blog</li> <li>SecurityScorecard Blog</li> </ul>"},{"location":"topics/Security/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/System-Design/","title":"System Design","text":"<p>Goal: Architect scalable and robust systems.</p> <p>Current Level: Level 1</p>"},{"location":"topics/System-Design/#level-1-system-design-fundamentals","title":"Level 1: System Design Fundamentals","text":"<ul> <li>Competencies: Client-server, monolith vs microservices, basic API design, load balancing, caching</li> <li>Tools: Swagger, Postman, NGINX, Redis</li> <li>Checklist:</li> <li>[ ] Design a simple client-server system</li> <li>[ ] Add caching to improve performance</li> <li>[ ] Use Swagger or Postman to document/test APIs</li> </ul>"},{"location":"topics/System-Design/#level-2-architecture-patterns-styles","title":"Level 2: Architecture Patterns &amp; Styles","text":"<ul> <li>Competencies: Microservices, SOA, layered/event-driven/hexagonal architectures, BFF, CQRS basics</li> <li>Tools: API gateways, C4 diagrams, event modeling tools</li> <li>Checklist:</li> <li>[ ] Design a system using hexagonal architecture</li> <li>[ ] Implement a BFF for multiple clients</li> <li>[ ] Create an event-driven workflow</li> </ul>"},{"location":"topics/System-Design/#level-3-distributed-systems","title":"Level 3: Distributed Systems","text":"<ul> <li>Competencies: Distributed transactions, CQRS, event sourcing, Sagas, idempotency, partitioning</li> <li>Tools: Kafka, Redis, Jaeger, Zipkin</li> <li>Checklist:</li> <li>[ ] Design a payment system with Sagas</li> <li>[ ] Implement event sourcing for auditing</li> <li>[ ] Partition data for scalability</li> </ul>"},{"location":"topics/System-Design/#level-4-large-scale-system-design","title":"Level 4: Large-Scale System Design","text":"<ul> <li>Competencies: Sharding, replication, CDN, geospatial, rate limiting, search, streaming</li> <li>Tools: CDN, sharding tools, search engines, Bloom filters</li> <li>Checklist:</li> <li>[ ] Design a social media feed system</li> <li>[ ] Implement a distributed search engine</li> <li>[ ] Use a CDN for content delivery</li> </ul>"},{"location":"topics/System-Design/#level-5-enterprise-architecture","title":"Level 5: Enterprise Architecture","text":"<ul> <li>Competencies: Multi-region, global consistency, DR, custom distributed algorithms, migrations</li> <li>Tools: Multi-region DBs, global load balancers, chaos engineering tools</li> <li>Checklist:</li> <li>[ ] Design a global e-commerce platform</li> <li>[ ] Implement active-active region architecture</li> <li>[ ] Plan a zero-downtime migration</li> </ul>"},{"location":"topics/System-Design/#resources","title":"Resources","text":"<ul> <li>System Design Primer</li> <li>Grokking the System Design Interview</li> <li>Awesome Scalability</li> </ul>"},{"location":"topics/System-Design/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Testing/","title":"Testing","text":"<p>Goal: Confidently test and validate software.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Testing/#level-1-testing-fundamentals","title":"Level 1: Testing Fundamentals","text":"<ul> <li>Competencies: Unit tests, assertions, test runners, code coverage</li> <li>Tools: JUnit, pytest, Go test, Jest</li> <li>Checklist:</li> <li>[ ] Write unit tests for core logic</li> <li>[ ] Use assertions to validate behavior</li> <li>[ ] Measure code coverage</li> </ul>"},{"location":"topics/Testing/#level-2-integration-api-testing","title":"Level 2: Integration &amp; API Testing","text":"<ul> <li>Competencies: Integration tests, API tests, mocking, test data</li> <li>Tools: Postman, Supertest, WireMock, test containers</li> <li>Checklist:</li> <li>[ ] Write integration tests for components</li> <li>[ ] Test APIs with Postman or similar tools</li> <li>[ ] Use mocks/stubs for dependencies</li> </ul>"},{"location":"topics/Testing/#level-3-end-to-end-ui-testing","title":"Level 3: End-to-End &amp; UI Testing","text":"<ul> <li>Competencies: E2E tests, UI automation, cross-browser/device</li> <li>Tools: Selenium, Cypress, Playwright</li> <li>Checklist:</li> <li>[ ] Automate E2E tests for user flows</li> <li>[ ] Run tests across browsers/devices</li> <li>[ ] Integrate E2E tests into CI/CD</li> </ul>"},{"location":"topics/Testing/#level-4-performance-security-testing","title":"Level 4: Performance &amp; Security Testing","text":"<ul> <li>Competencies: Load testing, fuzzing, vulnerability scanning</li> <li>Tools: JMeter, k6, OWASP ZAP, Burp Suite</li> <li>Checklist:</li> <li>[ ] Run load/performance tests</li> <li>[ ] Fuzz inputs for robustness</li> <li>[ ] Scan for security vulnerabilities</li> </ul>"},{"location":"topics/Testing/#level-5-test-strategy-automation-at-scale","title":"Level 5: Test Strategy &amp; Automation at Scale","text":"<ul> <li>Competencies: Test strategy, flaky test management, test data at scale</li> <li>Tools: Test orchestration tools, cloud test platforms</li> <li>Checklist:</li> <li>[ ] Define a test strategy for a large project</li> <li>[ ] Manage flaky tests and test data</li> <li>[ ] Use cloud platforms for test automation</li> </ul>"},{"location":"topics/Testing/#resources","title":"Resources","text":"<ul> <li>Testing Trophy by Kent C. Dodds</li> <li>OWASP Testing Guide</li> <li>Awesome Testing</li> </ul>"},{"location":"topics/Testing/#personal-notes","title":"Personal Notes","text":""}]}