{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Upskilling Journey","text":"<p>Welcome :) This site is my personal upskilling space, where I track my progress toward key backend, DevOps, and software engineering KPIs. Each section shows my current status and achievements as I work toward my goals.</p>"},{"location":"#progress-overview","title":"Progress Overview","text":"Topic Goal/Description Current Level Git &amp; GitHub Master version control &amp; collaboration Level 1 Project Management Understand dev project workflows Level 1 Communication &amp; Collaboration Improve team communication skills Level 1 Documentation Write and maintain clear docs Level 1 Containers &amp; Orchestration Deploy/manage containers &amp; clusters Level 1 Linux Confident Linux user/admin Level 1 CI/CD Automate build, test, deploy Level 1 Observability Monitor and troubleshoot systems Level 1 Redundancy &amp; DR Ensure system reliability &amp; recovery Level 1 Networking Understand and troubleshoot networks Level 1 Code + Design Patterns Apply proven coding/design techniques Level 1 Databases Use and optimize modern databases Level 1 System Design Architect scalable, robust systems Level 1 Security Build and maintain secure systems Level 1 API Design and implement robust APIs Level 1 Authentication &amp; Authorization Securely manage user access Level 1 Testing Confidently test and validate software Level 1"},{"location":"topics/API/","title":"API","text":"<p>Goal: Build robust and evolvable APIs using REST, GraphQL, and gRPC.</p> <p>Current Level: Level 1</p>"},{"location":"topics/API/#level-1-basic-rest-apis","title":"Level 1: Basic REST APIs","text":"<ul> <li>Competencies:</li> <li>Build basic REST APIs (CRUD)</li> <li>Understand HTTP methods and status codes</li> <li>Call APIs using Postman or curl</li> <li>Key Tools &amp; Practices:</li> <li>Express, Gin, Fastify, Postman, Swagger UI</li> <li>Basic routers and controllers</li> <li>Challenges to Master:</li> <li>Misusing status codes</li> <li>Forgetting to validate input</li> <li>Missing response formats</li> </ul>"},{"location":"topics/API/#level-2-rest-best-practices","title":"Level 2: REST Best Practices","text":"<ul> <li>Competencies:</li> <li>Apply REST principles (versioning, pagination, filtering)</li> <li>Write consistent endpoints</li> <li>Use OpenAPI or Swagger</li> <li>Key Tools &amp; Practices:</li> <li>Routing libraries</li> <li>OpenAPI/Swagger generators</li> <li>Request validation libraries</li> <li>Challenges to Master:</li> <li>Designing intuitive endpoints</li> <li>Managing breaking changes</li> <li>Handling validation consistently</li> </ul>"},{"location":"topics/API/#level-3-graphql-grpc","title":"Level 3: GraphQL &amp; gRPC","text":"<ul> <li>Competencies:</li> <li>Build GraphQL schemas and resolvers</li> <li>Use gRPC with Protobuf</li> <li>Understand streaming and schema evolution</li> <li>Key Tools &amp; Practices:</li> <li>Apollo Server, gqlgen, gRPC, Protobuf</li> <li>Code generation tools</li> <li>Challenges to Master:</li> <li>N+1 queries in GraphQL</li> <li>Versioning proto files</li> <li>Handling streaming clients</li> </ul>"},{"location":"topics/API/#level-4-api-security-gateway-integration","title":"Level 4: API Security &amp; Gateway Integration","text":"<ul> <li>Competencies:</li> <li>Secure APIs (JWT, OAuth2)</li> <li>Apply rate limiting and request throttling</li> <li>Integrate with API gateways</li> <li>Key Tools &amp; Practices:</li> <li>Keycloak, JWT libraries</li> <li>API Gateways (Kong, NGINX, Envoy)</li> <li>Rate limiter middlewares</li> <li>Challenges to Master:</li> <li>Token expiration &amp; refresh</li> <li>Enforcing scope-based access</li> <li>Detecting abuse patterns</li> </ul>"},{"location":"topics/API/#level-5-federated-evolvable-apis","title":"Level 5: Federated &amp; Evolvable APIs","text":"<ul> <li>Competencies:</li> <li>Federate APIs using GraphQL or gateways</li> <li>Manage multi-team APIs with clear ownership</li> <li>Design evolvable APIs</li> <li>Key Tools &amp; Practices:</li> <li>Apollo Federation</li> <li>gRPC Gateway</li> <li>Schema registry tools</li> <li>Challenges to Master:</li> <li>Coordinating breaking changes across teams</li> <li>Managing shared types and versioning</li> <li>Preventing over-fetching or under-fetching</li> </ul>"},{"location":"topics/API/#resources","title":"Resources","text":"<ul> <li>RESTful API Design</li> <li>GraphQL Docs</li> <li>gRPC Docs</li> <li>API Security Best Practices</li> </ul>"},{"location":"topics/API/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Auth/","title":"Authentication &amp; Authorization","text":"<p>Goal: Secure systems with robust, scalable, and standards-compliant authentication and authorization flows.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Auth/#level-1-basic-auth","title":"Level 1: Basic Auth","text":"<ul> <li>Competencies:</li> <li>Understand authentication vs. authorization</li> <li>Manage Keycloak realms and clients</li> <li>Handle HTTP cookies and status codes</li> <li>Implement password hashing and session management</li> <li>Understand basic JWT concepts</li> <li>Key Tools &amp; Practices:</li> <li>Keycloak, HTTP/HTTPS protocols, Cookie management</li> <li>Checklist:</li> <li>Initialize Keycloak for web apps</li> <li>Configure and secure Keycloak</li> <li>Integrate multiple social logins</li> </ul>"},{"location":"topics/Auth/#level-2-intermediate-auth","title":"Level 2: Intermediate Auth","text":"<ul> <li>Competencies:</li> <li>Manage sessions with expiration and idle timeouts</li> <li>Implement \u201cRemember Me\u201d securely</li> <li>Enforce RBAC on protected routes</li> <li>Apply strict authorization</li> <li>Key Tools &amp; Practices:</li> <li>OPA, HttpOnly cookies, CSRF protection</li> <li>Checklist:</li> <li>Secure \u201cremember me\u201d with long-lived tokens</li> <li>Build admin-only sections</li> <li>Enforce CSRF protection via token validation</li> </ul>"},{"location":"topics/Auth/#level-3-advanced-auth","title":"Level 3: Advanced Auth","text":"<ul> <li>Competencies:</li> <li>Implement JWTs for stateless auth</li> <li>Handle token expiration, refresh flows, and secure storage</li> <li>Integrate OAuth2 and OpenID Connect</li> <li>Enforce authorization with scopes, roles, and attributes</li> <li>Key Tools &amp; Practices:</li> <li>JWT, Refresh Tokens, OAuth2, OIDC</li> <li>Checklist:</li> <li>Develop REST API to issue/verify JWTs</li> <li>Implement seamless token refresh</li> <li>Integrate OAuth2 providers (e.g., Google login)</li> </ul>"},{"location":"topics/Auth/#level-4-expert-auth","title":"Level 4: Expert Auth","text":"<ul> <li>Competencies:</li> <li>Design SSO for multi-app access</li> <li>Master OAuth2 grant types</li> <li>Link social logins with external identities</li> <li>Integrate enterprise protocols (SAML, OAuth/OIDC)</li> <li>Implement MFA and advanced authorization (group-based, ABAC)</li> <li>Key Tools &amp; Practices:</li> <li>Auth0, Keycloak, MFA, SSO, SAML</li> <li>Checklist:</li> <li>Set up and enforce MFA</li> <li>Optimize social login and identity linking</li> <li>Integrate and troubleshoot enterprise protocols</li> </ul>"},{"location":"topics/Auth/#level-5-master-auth","title":"Level 5: Master Auth","text":"<ul> <li>Competencies:</li> <li>Architect advanced auth (passwordless, WebAuthn)</li> <li>Follow OWASP best practices</li> <li>Design zero-trust microservice authorization</li> <li>Enable audit logging and proactive monitoring</li> <li>Guide adoption of evolving auth standards (OAuth 2.1, decentralized ID)</li> <li>Key Tools &amp; Practices:</li> <li>Magic Links, WebAuthn, Zero-Trust frameworks, OWASP, Audit Logging, Decentralized Identity</li> <li>Checklist:</li> <li>Validate and implement passwordless/biometric auth</li> <li>Establish robust logging and monitoring</li> <li>Mentor teams on secure coding and auth practices</li> </ul>"},{"location":"topics/Auth/#resources","title":"Resources","text":"<ul> <li>OAuth 2.0 Spec</li> <li>OpenID Connect</li> <li>OWASP Authentication Cheat Sheet</li> <li>Keycloak Docs</li> </ul>"},{"location":"topics/Auth/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/CI-CD/","title":"CI/CD (Continuous Integration &amp; Deployment)","text":"<p>Goal: Build, test, and deploy software automatically using modern CI/CD tools and best practices.</p> <p>Current Level: Level 1</p>"},{"location":"topics/CI-CD/#level-1-cicd-fundamentals","title":"Level 1: CI/CD Fundamentals","text":"<ul> <li>Competencies: Basic GitHub Actions, YAML Pipelines, Continuous Integration</li> <li>Tools: GitHub Actions, YAML, Workflows, Runners</li> <li>Checklist:</li> <li>[ ] Set up a GitHub Actions workflow that runs on push</li> <li>[ ] Automate a simple build process using GitHub Actions</li> <li>[ ] Debug a failing CI/CD pipeline</li> </ul>"},{"location":"topics/CI-CD/#level-2-automated-testing-deployments","title":"Level 2: Automated Testing &amp; Deployments","text":"<ul> <li>Competencies: Unit Tests, Linting, Docker Builds, Secrets Management</li> <li>Tools: Docker, Jest/Pytest, GitHub Secrets, CodeCov, Linters</li> <li>Checklist:</li> <li>[ ] Integrate unit testing into CI/CD pipeline</li> <li>[ ] Set up Docker image builds and push to GHCR</li> <li>[ ] Configure secret management for sensitive credentials</li> </ul>"},{"location":"topics/CI-CD/#level-3-infrastructure-as-code-secure-deployments","title":"Level 3: Infrastructure as Code &amp; Secure Deployments","text":"<ul> <li>Competencies: Terraform, Kubernetes Deployments, GitOps</li> <li>Tools: Terraform, ArgoCD, Helm, Kubernetes</li> <li>Checklist:</li> <li>[ ] Automate infrastructure provisioning with Terraform</li> <li>[ ] Deploy a Kubernetes app using GitHub Actions</li> <li>[ ] Implement role-based access control (RBAC) for CI/CD workflows</li> </ul>"},{"location":"topics/CI-CD/#level-4-advanced-cicd-pipelines","title":"Level 4: Advanced CI/CD Pipelines","text":"<ul> <li>Competencies: Multi-Stage Builds, Observability, Deployment Rollbacks</li> <li>Tools: Prometheus, Grafana, Jaeger, Self-Hosted Runners, Canary Deployments</li> <li>Checklist:</li> <li>[ ] Implement multi-stage builds for optimized CI/CD pipelines</li> <li>[ ] Deploy a monitoring system for CI/CD health tracking</li> <li>[ ] Use self-hosted runners to speed up workflows</li> </ul>"},{"location":"topics/CI-CD/#level-5-enterprise-cicd-large-scale-infrastructure-automation","title":"Level 5: Enterprise CI/CD &amp; Large-Scale Infrastructure Automation","text":"<ul> <li>Competencies: Kubernetes Operators, Advanced GitOps, Full Automation</li> <li>Tools: GitHub Enterprise, Cross-Cluster Deployments, Spinnaker, Tekton</li> <li>Checklist:</li> <li>[ ] Design an enterprise-grade CI/CD pipeline for multiple teams</li> <li>[ ] Optimize a highly available self-hosted runner system</li> <li>[ ] Implement zero-downtime deployments at scale</li> </ul>"},{"location":"topics/CI-CD/#resources","title":"Resources","text":"<ul> <li>GitHub Actions Docs</li> <li>Terraform by HashiCorp</li> <li>ArgoCD Docs</li> <li>Tekton Pipelines</li> </ul>"},{"location":"topics/CI-CD/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Code-Design-Patterns/","title":"Code + Design Patterns","text":"<p>Goal: Write clean, idiomatic, and performant code, and guide architecture decisions through patterns and standards.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Code-Design-Patterns/#level-1-core-programming-concurrency","title":"Level 1: Core Programming &amp; Concurrency","text":"<ul> <li>Competencies:</li> <li>Master language features and syntax</li> <li>Apply arrays, maps, trees, graphs, sorting/searching</li> <li>Write idiomatic, concurrent code</li> <li>Use goroutines, async/await, threads effectively</li> <li>Outcomes:</li> <li>Solve real-world problems using standard data structures</li> <li>Use built-in concurrency primitives</li> <li>Follow language idioms</li> <li>Challenges:</li> <li>Avoiding race conditions</li> <li>Mapping theory to practical problems</li> <li>Managing shared memory and goroutine/thread lifecycles</li> </ul>"},{"location":"topics/Code-Design-Patterns/#level-2-data-structures-code-organization","title":"Level 2: Data Structures &amp; Code Organization","text":"<ul> <li>Competencies:</li> <li>Use design patterns to solve recurring problems</li> <li>Write clean, modular, and scalable code</li> <li>Organize code by responsibility (feature/domain/layered)</li> <li>Outcomes:</li> <li>Apply SOLID principles</li> <li>Use separation of concerns</li> <li>Favor composition over inheritance</li> <li>Challenges:</li> <li>Avoiding over-abstracting</li> <li>Maintaining simplicity while scaling</li> <li>Teaching and enforcing architecture standards</li> </ul>"},{"location":"topics/Code-Design-Patterns/#level-3-advanced-algorithms-problem-solving","title":"Level 3: Advanced Algorithms &amp; Problem Solving","text":"<ul> <li>Competencies:</li> <li>Solve LeetCode Medium+ problems</li> <li>Use recursion, dynamic programming, greedy, backtracking</li> <li>Optimize space/time complexity under constraints</li> <li>Outcomes:</li> <li>Break down complex problems</li> <li>Write clear, performant solutions</li> <li>Communicate thought process effectively</li> <li>Challenges:</li> <li>Balancing readability with optimization</li> <li>Debugging under time pressure</li> <li>Recognizing algorithmic patterns</li> </ul>"},{"location":"topics/Code-Design-Patterns/#level-4-technical-leadership-codebase-stewardship","title":"Level 4: Technical Leadership &amp; Codebase Stewardship","text":"<ul> <li>Competencies:</li> <li>Lead complex refactors</li> <li>Mentor across code quality, design, and scalability</li> <li>Set code standards and enforce architecture discipline</li> <li>Outcomes:</li> <li>Provide effective reviews</li> <li>Advocate pattern reuse and clean abstractions</li> <li>Coach others on decision trade-offs</li> <li>Challenges:</li> <li>Balancing team autonomy with consistency</li> <li>Aligning tech direction with business goals</li> <li>Building team confidence through code mentoring</li> </ul>"},{"location":"topics/Code-Design-Patterns/#resources","title":"Resources","text":"<ul> <li>Design Patterns \u2013 Refactoring.Guru</li> <li>SOLID Principles</li> <li>LeetCode Practice</li> </ul>"},{"location":"topics/Code-Design-Patterns/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Communication-Collaboration/","title":"Communication &amp; Collaboration","text":"<p>Goal: Improve team communication and collaboration skills.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Communication-Collaboration/#level-1-communication-fundamentals","title":"Level 1: Communication Fundamentals","text":"<ul> <li>Competencies: Clear written communication, basic meeting etiquette, active listening</li> <li>Tools: Email, Slack, Teams, Google Meet</li> <li>Checklist:</li> <li>[ ] Write clear and concise emails/messages</li> <li>[ ] Participate in team meetings with basic etiquette</li> <li>[ ] Practice active listening in conversations</li> </ul>"},{"location":"topics/Communication-Collaboration/#level-2-team-collaboration","title":"Level 2: Team Collaboration","text":"<ul> <li>Competencies: Asynchronous updates, knowledge sharing, feedback culture</li> <li>Tools: Confluence, Google Docs, Standup bots</li> <li>Checklist:</li> <li>[ ] Share updates asynchronously with the team</li> <li>[ ] Contribute to shared documentation</li> <li>[ ] Give and receive constructive feedback</li> </ul>"},{"location":"topics/Communication-Collaboration/#level-3-conflict-resolution-facilitation","title":"Level 3: Conflict Resolution &amp; Facilitation","text":"<ul> <li>Competencies: Conflict resolution, facilitating meetings, inclusive communication</li> <li>Tools: Retrospective tools, Miro, Zoom breakout rooms</li> <li>Checklist:</li> <li>[ ] Help resolve a team conflict constructively</li> <li>[ ] Facilitate a team meeting or retrospective</li> <li>[ ] Ensure all voices are heard in discussions</li> </ul>"},{"location":"topics/Communication-Collaboration/#level-4-cross-team-collaboration","title":"Level 4: Cross-Team Collaboration","text":"<ul> <li>Competencies: Cross-team projects, stakeholder management, negotiation</li> <li>Tools: Jira, shared calendars, project management tools</li> <li>Checklist:</li> <li>[ ] Collaborate on a project with another team</li> <li>[ ] Manage stakeholder expectations</li> <li>[ ] Negotiate priorities or resources</li> </ul>"},{"location":"topics/Communication-Collaboration/#level-5-leadership-influence","title":"Level 5: Leadership &amp; Influence","text":"<ul> <li>Competencies: Mentoring, leading initiatives, organizational communication</li> <li>Tools: Mentoring platforms, company-wide forums, leadership training</li> <li>Checklist:</li> <li>[ ] Mentor or coach a team member</li> <li>[ ] Lead a cross-team initiative</li> <li>[ ] Communicate effectively at the organizational level</li> </ul>"},{"location":"topics/Communication-Collaboration/#resources","title":"Resources","text":"<ul> <li>Crucial Conversations Book</li> <li>Atlassian Team Playbook</li> <li>Google re:Work - Guide: Understand Team Effectiveness</li> </ul>"},{"location":"topics/Communication-Collaboration/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Containers-Orchestration/","title":"Containers &amp; Orchestration","text":"<p>Goal: Master containerization with Docker and orchestrate scalable deployments using Kubernetes.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Containers-Orchestration/#level-1-docker-basics","title":"Level 1: Docker Basics","text":"<ul> <li>Competencies: Install, Pull, Run, Stop Containers, Volumes, Networks, Docker Compose</li> <li>Commands: Writing your first Dockerfile, <code>docker run</code>, <code>docker ps</code>, <code>docker stop</code>, <code>docker rm</code>, <code>docker volume</code>, <code>docker network</code>, <code>docker compose</code></li> <li>Checklist:</li> <li>[ ] Run a Docker container with a simple web app</li> <li>[ ] Bind a volume to a container to persist data</li> <li>[ ] Create a custom Docker network and connect two containers</li> </ul>"},{"location":"topics/Containers-Orchestration/#level-2-advanced-docker","title":"Level 2: Advanced Docker","text":"<ul> <li>Competencies: Multi-Container Apps, Storage, Container Registries</li> <li>Commands: <code>docker push</code>, <code>docker tag</code>, <code>docker build</code>, <code>docker inspect</code>, caching layer, multi-stage</li> <li>Checklist:</li> <li>[ ] Write a <code>docker-compose.yml</code> for a multi-container application</li> <li>[ ] Push an image to GHCR or Docker Hub</li> <li>[ ] Set up persistent storage using Docker volumes</li> </ul>"},{"location":"topics/Containers-Orchestration/#level-3-container-orchestration","title":"Level 3: Container Orchestration","text":"<ul> <li>Competencies: Kubernetes Basics, Docker Swarm, Helm</li> <li>Commands: <code>kubectl apply</code>, <code>kubectl get pods</code>, <code>kubectl logs</code>, Docker Swarm, <code>helm install</code></li> <li>Checklist:</li> <li>[ ] Deploy an application on Kubernetes using YAML files</li> <li>[ ] Use Helm charts to package and deploy an app</li> <li>[ ] Set up a basic Swarm cluster and deploy a service</li> </ul>"},{"location":"topics/Containers-Orchestration/#level-4-kubernetes-advanced","title":"Level 4: Kubernetes Advanced","text":"<ul> <li>Competencies: Scaling, Security, Monitoring, Service Mesh</li> <li>Commands: <code>kubectl scale</code>, <code>kubectl rollout</code>, <code>kubectl top</code>, <code>istioctl</code>, <code>linkerd</code>, <code>cilium</code></li> <li>Checklist:</li> <li>[ ] Implement Horizontal Pod Autoscaling (HPA)</li> <li>[ ] Deploy Kubernetes Network Policies</li> <li>[ ] Secure an app with Istio or Linkerd Service Mesh</li> </ul>"},{"location":"topics/Containers-Orchestration/#level-5-enterprise-kubernetes","title":"Level 5: Enterprise Kubernetes","text":"<ul> <li>Competencies: Multi-Cluster, Operators, Virtualization, Performance Tuning</li> <li>Commands: <code>kubeadm</code>, <code>kubevirt</code>, custom CRDs, <code>kubefed</code>, <code>cluster-api</code></li> <li>Checklist:</li> <li>[ ] Deploy a Multi-Cluster Kubernetes Federation</li> <li>[ ] Write a Custom Kubernetes Operator</li> <li>[ ] Optimize a large-scale Kubernetes cluster for 1000+ nodes</li> </ul>"},{"location":"topics/Containers-Orchestration/#resources","title":"Resources","text":"<ul> <li>Docker Docs</li> <li>Kubernetes Docs</li> <li>Awesome Kubernetes</li> </ul>"},{"location":"topics/Containers-Orchestration/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Databases/","title":"Databases","text":"<p>Goal: Design and operate performant, scalable databases.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Databases/#level-1-fundamentals","title":"Level 1: Fundamentals","text":"<ul> <li>Competencies: SQL basics, Redis commands, Elasticsearch DSL, Qdrant insert/query</li> <li>Tools: PostgreSQL, MS SQL, Oracle, Redis, Elasticsearch, Qdrant</li> <li>Checklist:</li> <li>[ ] Perform CRUD in SQL</li> <li>[ ] Search/filter with Elastic filters vs queries</li> <li>[ ] Insert/search vectors in Qdrant</li> <li>[ ] Use Redis for TTL-based caching</li> </ul>"},{"location":"topics/Databases/#level-2-schema-design","title":"Level 2: Schema Design","text":"<ul> <li>Competencies: Normalization, indexing, analyzers, Redis eviction, Qdrant collection config</li> <li>Tools: B-tree/GiST/GIN, EXPLAIN ANALYZE, Elastic mappings, Redis data types, Qdrant token filters</li> <li>Checklist:</li> <li>[ ] Normalize SQL tables and create optimal indexes</li> <li>[ ] Create analyzers in Elastic for multi-language support</li> <li>[ ] Tune Redis eviction policy</li> <li>[ ] Define Qdrant collection schema with metadata fields</li> </ul>"},{"location":"topics/Databases/#level-3-advanced-usage","title":"Level 3: Advanced Usage","text":"<ul> <li>Competencies: SQL functions, CTEs, triggers, Elastic aggregations/scripts, Redis rate limits, Qdrant optimization</li> <li>Tools: PL/pgSQL, T-SQL, Elastic Painless scripts, Redis Streams/Lua, Qdrant payload indexing</li> <li>Checklist:</li> <li>[ ] Use SQL functions and triggers to automate logic</li> <li>[ ] Aggregate and bucket results in Elastic</li> <li>[ ] Implement Redis-based rate limiting</li> <li>[ ] Optimize Qdrant collection with multiple segments and query filters</li> </ul>"},{"location":"topics/Databases/#level-4-operational-architecture","title":"Level 4: Operational Architecture","text":"<ul> <li>Competencies: Replica design, shard tuning, cache patterns, Qdrant payloads</li> <li>Tools: PgBouncer, AlwaysOn Ags, Redis caching layers, Qdrant indexed payloads</li> <li>Checklist:</li> <li>[ ] Route SQL reads to replicas</li> <li>[ ] Tune Elastic shard counts and replicas</li> <li>[ ] Implement Redis caching for different workloads</li> <li>[ ] Filter and score with Qdrant payloads</li> </ul>"},{"location":"topics/Databases/#level-5-distributed-dbs","title":"Level 5: Distributed DBs","text":"<ul> <li>Competencies: Geo-distribution, failover, hybrid search, alerting</li> <li>Tools: CockroachDB, Cassandra, Redis Sentinel, Prometheus + Grafana, Elastic + Qdrant</li> <li>Checklist:</li> <li>[ ] Deploy CockroachDB for geo-distributed SQL</li> <li>[ ] Handle key eviction and latency in Redis cluster</li> <li>[ ] Implement hybrid search (vector + keyword)</li> <li>[ ] Set alerts on DB metrics and failover</li> </ul>"},{"location":"topics/Databases/#resources","title":"Resources","text":"<ul> <li>PostgreSQL Official Docs</li> <li>Redis Command Reference</li> <li>Elasticsearch Guide</li> <li>Qdrant Docs</li> </ul>"},{"location":"topics/Databases/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Deployment/","title":"\ud83d\ude80 GitHub Pages Deployment Guide using MkDocs","text":"<p>This guide walks you through: 1. Initial setup 2. Deploying to GitHub Pages 3. Updating content 4. Best practices</p>"},{"location":"topics/Deployment/#prerequisites","title":"\u2705 Prerequisites","text":"<ul> <li>Python \u2265 3.7 installed</li> <li>Git installed and configured</li> <li>A GitHub repository (public or GitHub Pro if private)</li> <li>MkDocs and Material theme installed</li> </ul> <p>Install requirements:</p> <pre><code>pip install mkdocs mkdocs-material\n</code></pre> <p>Optional plugins (recommended):</p> <pre><code>pip install mkdocs-git-revision-date-localized\n</code></pre>"},{"location":"topics/Deployment/#1-project-structure","title":"\ud83c\udfd7\ufe0f 1. Project Structure","text":"<p>Your repo structure should look like this:</p> <pre><code>Upskilling/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 topics/\n\u2502   \u2502   \u251c\u2500\u2500 Git-GitHub.md\n\u2502   \u2502   \u251c\u2500\u2500 CI-CD.md\n\u251c\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"topics/Deployment/#2-mkdocsyml-example","title":"\u2699\ufe0f 2. <code>mkdocs.yml</code> Example","text":"<pre><code>site_name: Upskilling Journey\nsite_description: My curated docs for backend, DevOps, system design &amp; beyond.\nsite_url: https://AliAlSubhi98.github.io/Upskilling/\nrepo_url: https://github.com/AliAlSubhi98/Upskilling\nrepo_name: GitHub\n\ntheme:\n  name: material\n  features:\n    - navigation.sections\n    - navigation.indexes\n    - content.code.copy\n    - content.action.edit\n    - search.highlight\n    - search.share\n  palette:\n    - scheme: default\n      primary: blue\n      accent: deep purple\n    - scheme: slate\n      primary: blue\n      accent: deep purple\n      toggle:\n        icon: material/weather-night\n        name: Switch to dark mode\n  icon:\n    repo: fontawesome/brands/github\n\nnav:\n  - Home: index.md\n  - Git &amp; GitHub: topics/Git-GitHub.md\n  - CI/CD: topics/CI-CD.md\n  - Deployment Guide: Deployment.md\n\nmarkdown_extensions:\n  - toc:\n      permalink: true\n  - admonition\n  - codehilite\n  - pymdownx.superfences\n\nplugins:\n  - search\n  # Optional if installed\n  # - git-revision-date-localized:\n  #     fallback_to_build_date: true\n</code></pre>"},{"location":"topics/Deployment/#3-initial-deployment-to-github-pages","title":"\ud83d\ude80 3. Initial Deployment to GitHub Pages","text":""},{"location":"topics/Deployment/#step-a-initialize-and-push-repo","title":"Step A: Initialize and Push Repo","text":"<pre><code>git init\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add origin https://github.com/AliAlSubhi98/Upskilling.git\ngit push -u origin main\n</code></pre>"},{"location":"topics/Deployment/#step-b-build-the-site","title":"Step B: Build the Site","text":"<pre><code>mkdocs build\n</code></pre>"},{"location":"topics/Deployment/#step-c-deploy-to-github-pages","title":"Step C: Deploy to GitHub Pages","text":"<pre><code>mkdocs gh-deploy\n</code></pre> <p>You will be prompted for GitHub credentials. Use a personal access token (PAT) instead of password.</p>"},{"location":"topics/Deployment/#4-enable-github-pages-in-repository","title":"\ud83c\udf10 4. Enable GitHub Pages in Repository","text":"<p>Go to: <code>https://github.com/AliAlSubhi98/Upskilling/settings/pages</code></p> <ul> <li>Source: Select <code>gh-pages</code> branch</li> <li>Directory: <code>/ (root)</code></li> <li>Save \u2705</li> </ul>"},{"location":"topics/Deployment/#5-how-to-update-the-docs","title":"\u270f\ufe0f 5. How to Update the Docs","text":"<ol> <li>Edit or add Markdown files under <code>docs/</code></li> <li>Run:</li> </ol> <pre><code>mkdocs build\nmkdocs gh-deploy\n</code></pre> <ol> <li>Changes will appear live at the GitHub Pages URL.</li> </ol>"},{"location":"topics/Deployment/#optional-cleanup","title":"\ud83e\uddfc Optional Cleanup","text":"<pre><code>mkdocs build --clean\nmkdocs serve  # for local preview\n</code></pre>"},{"location":"topics/Deployment/#best-practices","title":"\ud83d\udee1\ufe0f Best Practices","text":"<ul> <li>Commit changes regularly</li> <li>Use clear folder structure (<code>docs/topics/...</code>)</li> <li>Don't push <code>site/</code></li> <li>Add <code>site/</code> to <code>.gitignore</code></li> <li>Store secrets in <code>.env</code> and ignore them</li> </ul>"},{"location":"topics/Documentation/","title":"Documentation","text":"<p>Goal: Write and maintain clear, effective documentation.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Documentation/#level-1-documentation-basics","title":"Level 1: Documentation Basics","text":"<ul> <li>Competencies: Writing README files, basic Markdown, documenting code usage</li> <li>Tools: Markdown, GitHub README, Google Docs</li> <li>Checklist:</li> <li>[ ] Write a clear project README</li> <li>[ ] Document code usage and examples</li> <li>[ ] Use basic Markdown formatting</li> </ul>"},{"location":"topics/Documentation/#level-2-structured-docs-standards","title":"Level 2: Structured Docs &amp; Standards","text":"<ul> <li>Competencies: API docs, docstrings, templates, style guides</li> <li>Tools: Sphinx, JSDoc, OpenAPI/Swagger, Confluence</li> <li>Checklist:</li> <li>[ ] Add docstrings/comments to functions and classes</li> <li>[ ] Create API documentation using a standard tool</li> <li>[ ] Follow a documentation style guide</li> </ul>"},{"location":"topics/Documentation/#level-3-collaborative-living-docs","title":"Level 3: Collaborative &amp; Living Docs","text":"<ul> <li>Competencies: Collaborative editing, versioned docs, changelogs, diagrams</li> <li>Tools: Google Docs, Notion, Mermaid, PlantUML</li> <li>Checklist:</li> <li>[ ] Collaborate on docs with teammates</li> <li>[ ] Maintain a changelog for your project</li> <li>[ ] Add diagrams to explain architecture or flows</li> </ul>"},{"location":"topics/Documentation/#level-4-automation-publishing","title":"Level 4: Automation &amp; Publishing","text":"<ul> <li>Competencies: Automated doc generation, publishing, continuous documentation</li> <li>Tools: MkDocs, Read the Docs, GitHub Pages, CI/CD integration</li> <li>Checklist:</li> <li>[ ] Automate documentation builds and publishing</li> <li>[ ] Host docs online for easy access</li> <li>[ ] Integrate doc updates into CI/CD pipeline</li> </ul>"},{"location":"topics/Documentation/#level-5-documentation-as-a-product","title":"Level 5: Documentation as a Product","text":"<ul> <li>Competencies: User guides, onboarding, localization, feedback loops</li> <li>Tools: Helpdesk platforms, translation tools, analytics</li> <li>Checklist:</li> <li>[ ] Create user guides or onboarding docs</li> <li>[ ] Localize documentation for multiple languages</li> <li>[ ] Collect and act on user feedback for docs</li> </ul>"},{"location":"topics/Documentation/#resources","title":"Resources","text":"<ul> <li>Google Technical Writing Courses</li> <li>Di\u00e1taxis Documentation Framework</li> <li>Write the Docs Community</li> </ul>"},{"location":"topics/Documentation/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Git-GitHub/","title":"Git &amp; GitHub","text":"<p>Goal: Master version control and collaboration using Git and GitHub.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Git-GitHub/#level-1-git-basics","title":"Level 1: Git Basics","text":"<ul> <li>Competencies: Init, Clone, Add, Commit, Push, Pull, Branching</li> <li>Commands: <code>git init</code>, <code>git clone</code>, <code>git add</code>, <code>git commit</code>, <code>git push</code>, <code>git pull</code>, <code>.gitignore</code></li> <li>Checklist:</li> <li>[ ] Create a new repo and push to GitHub</li> <li>[ ] Clone a repo and make your first commit</li> <li>[ ] Use .gitignore to exclude files</li> </ul>"},{"location":"topics/Git-GitHub/#level-2-advanced-branching-merging","title":"Level 2: Advanced Branching &amp; Merging","text":"<ul> <li>Competencies: Fast-Forward Merges, Three-Way Merges, Rebasing, Merge Conflicts, PRs</li> <li>Commands: <code>git branch</code>, <code>git checkout -b</code>, <code>git rebase</code>, <code>git merge</code>, <code>git cherry-pick</code>, GitHub PRs</li> <li>Checklist:</li> <li>[ ] Create feature branches and merge using both merge and rebase</li> <li>[ ] Resolve complex merge conflicts</li> <li>[ ] Use git cherry-pick to selectively move commits across branches</li> </ul>"},{"location":"topics/Git-GitHub/#level-3-commit-history-recovery","title":"Level 3: Commit History &amp; Recovery","text":"<ul> <li>Competencies: Reflog, Reset, Revert, Bisect, Tagging</li> <li>Commands: <code>git reflog</code>, <code>git reset --hard</code>, <code>git revert</code>, <code>git bisect</code>, <code>git tag</code></li> <li>Checklist:</li> <li>[ ] Recover lost commits using reflog</li> <li>[ ] Use git bisect to find a bug in commit history</li> <li>[ ] Reset changes safely without losing work</li> </ul>"},{"location":"topics/Git-GitHub/#level-4-enterprise-gitops-security","title":"Level 4: Enterprise GitOps &amp; Security","text":"<ul> <li>Competencies: Protected Branches, Signed Commits, CI/CD, LFS, GitHub Actions</li> <li>Commands: <code>git commit -S</code>, <code>git lfs</code>, GitHub Actions, Protected Branch Policies</li> <li>Checklist:</li> <li>[ ] Enforce signed commits for security</li> <li>[ ] Set up GitHub Actions for automated testing</li> <li>[ ] Implement branch protection rules to enforce workflow policies</li> </ul>"},{"location":"topics/Git-GitHub/#level-5-deep-git-internals-large-scale-gitops","title":"Level 5: Deep Git Internals &amp; Large-Scale GitOps","text":"<ul> <li>Competencies: Custom Hooks, Packfiles, GitHub API, Large Repos</li> <li>Commands: <code>git fsck</code>, <code>git worktree</code>, <code>git gc</code>, <code>git filter-branch</code>, GitHub API</li> <li>Checklist:</li> <li>[ ] Optimize a large repository using git gc and repack</li> <li>[ ] Write a custom Git hook for automated commit checks</li> <li>[ ] Use the GitHub GraphQL API to automate repo management</li> </ul>"},{"location":"topics/Git-GitHub/#resources","title":"Resources","text":"<ul> <li>Pro Git Book</li> <li>GitHub Docs</li> <li>Atlassian Git Tutorials</li> </ul>"},{"location":"topics/Git-GitHub/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Linux/","title":"Linux","text":"<p>Goal: Gain proficiency in Linux command-line tools, server management, virtualization, and automation.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Linux/#level-1-linux-cli-basics","title":"Level 1: Linux CLI Basics","text":"<ul> <li>Competencies: Navigation, File Management, Permissions, Users &amp; Groups</li> <li>Commands: <code>cd</code>, <code>ls</code>, <code>cp</code>, <code>mv</code>, <code>rm</code>, <code>chmod</code>, <code>chown</code>, <code>pwd</code>, <code>touch</code>, <code>cat</code>, <code>nano</code>, <code>sudo</code>, <code>man</code></li> <li>Checklist:</li> <li>[ ] Navigate through directories and list files with different options</li> <li>[ ] Modify file permissions using chmod and chown</li> <li>[ ] Create and manage users with useradd and passwd</li> </ul>"},{"location":"topics/Linux/#level-2-package-management-basic-scripting","title":"Level 2: Package Management &amp; Basic Scripting","text":"<ul> <li>Competencies: Installing &amp; Managing Software, Basic Shell Scripting, WSL</li> <li>Commands: <code>apt</code>, <code>yum</code>, <code>dnf</code>, <code>pacman</code>, <code>yay</code>, bash scripting, WSL</li> <li>Checklist:</li> <li>[ ] Install and manage software using package managers</li> <li>[ ] Set up and configure WSL on Windows</li> <li>[ ] Write a basic Bash script for automating repetitive tasks</li> </ul>"},{"location":"topics/Linux/#level-3-process-management-networking","title":"Level 3: Process Management &amp; Networking","text":"<ul> <li>Competencies: System Performance, Networking, Server Management</li> <li>Commands: <code>top</code>, <code>htop</code>, <code>ps</code>, <code>kill</code>, <code>netstat</code>, <code>ifconfig</code>, <code>systemctl</code>, <code>journalctl</code>, <code>crontab</code></li> <li>Checklist:</li> <li>[ ] Monitor system performance using top/htop</li> <li>[ ] Kill or prioritize processes using nice/renice</li> <li>[ ] Set up and manage system services using systemctl</li> </ul>"},{"location":"topics/Linux/#level-4-virtualization-containerization-security","title":"Level 4: Virtualization, Containerization &amp; Security","text":"<ul> <li>Competencies: Docker, Firewall, SSH, System Hardening</li> <li>Commands: VirtualBox, KVM, Docker, SSH, <code>iptables</code>, <code>ufw</code>, <code>fail2ban</code></li> <li>Checklist:</li> <li>[ ] Deploy and manage virtual machines using KVM or VirtualBox</li> <li>[ ] Set up and secure an SSH server</li> <li>[ ] Configure firewall rules using iptables or ufw</li> </ul>"},{"location":"topics/Linux/#level-5-advanced-system-administration-automation","title":"Level 5: Advanced System Administration &amp; Automation","text":"<ul> <li>Competencies: Kernel Compilation, Infrastructure as Code, Large-Scale Automation</li> <li>Commands: <code>systemd</code>, Ansible, Terraform, CI/CD, Kubernetes, Custom Kernels</li> <li>Checklist:</li> <li>[ ] Compile and run a custom Linux kernel</li> <li>[ ] Automate server setup using Ansible or Terraform</li> <li>[ ] Optimize a large-scale Linux deployment</li> </ul>"},{"location":"topics/Linux/#resources","title":"Resources","text":"<ul> <li>Linux Journey</li> <li>The Linux Command Line Book</li> <li>DigitalOcean Tutorials</li> </ul>"},{"location":"topics/Linux/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Networking/","title":"Networking","text":"<p>Goal: Understand and manage computer networks, from IP basics to secure multi-cloud architecture.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Networking/#level-1-fundamentals","title":"Level 1: Fundamentals","text":"<ul> <li>Competencies:</li> <li>Basic network concepts (IP addressing, subnets, ports)</li> <li>Understanding TCP/IP and OSI models</li> <li>Networking tools (ping, traceroute, nslookup)</li> <li>HTTP/HTTPS protocols and status codes</li> <li>Basic firewall concepts</li> <li>Tools: Wireshark, ping, traceroute, nslookup, netstat, cURL, control panel configs</li> <li>Checklist:</li> <li>[ ] Understanding subnet math and IP addressing schemes</li> <li>[ ] Distinguishing between different protocol behaviors</li> <li>[ ] Troubleshooting connectivity issues</li> <li>[ ] Learning networking terminology and concepts</li> <li>[ ] Configuring local development environments</li> </ul>"},{"location":"topics/Networking/#level-2-advanced-fundamentals","title":"Level 2: Advanced Fundamentals","text":"<ul> <li>Competencies:</li> <li>Network topologies and architecture</li> <li>DNS configuration and troubleshooting</li> <li>Load balancing (types and when to use)</li> <li>VPN technologies and use cases</li> <li>Proxy servers and reverse proxies</li> <li>Tools: NGINX, Bind, OpenVPN/IPSec, iptables/ufw, Postman/Insomnia</li> <li>Checklist:</li> <li>[ ] Debugging DNS propagation issues</li> <li>[ ] Balancing security with accessibility</li> <li>[ ] Managing certificate lifecycles</li> <li>[ ] Understanding different proxy configurations</li> <li>[ ] Implementing proper network segmentation</li> </ul>"},{"location":"topics/Networking/#level-3-intermediate","title":"Level 3: Intermediate","text":"<ul> <li>Competencies:</li> <li>Network security best practices</li> <li>Implementing TLS/SSL certificates</li> <li>API gateway configuration</li> <li>Software-defined networking (SDN) basics</li> <li>VPC/subnet design in cloud environments</li> <li>Tools: Terraform, Let's Encrypt/Certbot, Nagios, Zabbix, AWS VPC, Azure VNET</li> <li>Checklist:</li> <li>[ ] Designing for scale and resilience</li> <li>[ ] Managing overlapping IP address spaces</li> <li>[ ] Implementing consistent security across environments</li> <li>[ ] Troubleshooting intermittent network issues</li> <li>[ ] Handling cross-region communication efficiently</li> </ul>"},{"location":"topics/Networking/#level-4-advanced","title":"Level 4: Advanced","text":"<ul> <li>Competencies:</li> <li>Kubernetes network models and CNI plugins</li> <li>Service mesh architecture and implementation</li> <li>Container networking optimization</li> <li>Zero-trust network access principles</li> <li>Layer 7 traffic management</li> <li>Tools: Istio, Linkerd, Cilium, Calico, Envoy, NetworkPolicy, Telepresence, ksniff</li> <li>Checklist:</li> <li>[ ] Troubleshooting complex service connectivity issues</li> <li>[ ] Optimizing network performance at scale</li> <li>[ ] Managing network policies across clusters</li> <li>[ ] Implementing secure cross-service communication</li> <li>[ ] Debugging microservice network flow</li> </ul>"},{"location":"topics/Networking/#level-5-expert","title":"Level 5: Expert","text":"<ul> <li>Competencies:</li> <li>Multi-cluster/multi-cloud network architecture</li> <li>Network automation and programmability</li> <li>eBPF-based networking innovations</li> <li>Custom network protocol optimization</li> <li>Global traffic management</li> <li>Tools: Cilium, Hubble, custom eBPF, multi-cluster mesh, Network as Code, advanced analyzers</li> <li>Checklist:</li> <li>[ ] Designing truly portable network abstractions</li> <li>[ ] Implementing consistent policies across heterogeneous environments</li> <li>[ ] Balancing networking innovation with stability</li> <li>[ ] Optimizing cost and performance at global scale</li> <li>[ ] Designing for extreme resilience and security</li> </ul>"},{"location":"topics/Networking/#resources","title":"Resources","text":"<ul> <li>Linux Networking Guide</li> <li>AWS VPC Concepts</li> <li>Kubernetes Network Policies</li> </ul>"},{"location":"topics/Networking/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Observability/","title":"Observability","text":"<p>Goal: Gain complete visibility into system health using logs, metrics, and traces.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Observability/#level-1-monitoring-logging-basics","title":"Level 1: Monitoring &amp; Logging Basics","text":"<ul> <li>Competencies: Log Analysis, Metrics Collection, Understanding Alerts</li> <li>Tools: Log Files, Syslog, journalctl, top, htop</li> <li>Checklist:</li> <li>[ ] Collect logs from a running application using journalctl or tail -f</li> <li>[ ] Use htop or top to monitor real-time system performance</li> <li>[ ] Configure basic alerts for server uptime</li> </ul>"},{"location":"topics/Observability/#level-2-advanced-logging-metrics-collection","title":"Level 2: Advanced Logging &amp; Metrics Collection","text":"<ul> <li>Competencies: Centralized Logging, Structured Logs, Metrics Dashboards</li> <li>Tools: ELK Stack (Elasticsearch, Logstash, Kibana), Prometheus, Fluentd</li> <li>Checklist:</li> <li>[ ] Set up an ELK Stack and aggregate logs from multiple sources</li> <li>[ ] Create a Prometheus-based metrics dashboard</li> <li>[ ] Implement structured logging with JSON</li> </ul>"},{"location":"topics/Observability/#level-3-distributed-tracing-centralized-monitoring","title":"Level 3: Distributed Tracing &amp; Centralized Monitoring","text":"<ul> <li>Competencies: OpenTelemetry, Jaeger, Log Aggregation, Alerting</li> <li>Tools: OpenTelemetry (Otel), Jaeger, Grafana, Loki</li> <li>Checklist:</li> <li>[ ] Integrate Jaeger for distributed tracing in a microservices system</li> <li>[ ] Set up Grafana with Loki for real-time log visualization</li> <li>[ ] Configure log aggregation across multiple services</li> </ul>"},{"location":"topics/Observability/#level-4-full-observability-stack-incident-response","title":"Level 4: Full Observability Stack &amp; Incident Response","text":"<ul> <li>Competencies: Service Health, Tracing Pipelines, SLA Monitoring</li> <li>Tools: PagerDuty, Sentry, OpenTracing, Prometheus Alerts, Thanos</li> <li>Checklist:</li> <li>[ ] Implement a full observability stack with tracing, logs, and metrics</li> <li>[ ] Configure alerts with Prometheus &amp; PagerDuty</li> <li>[ ] Handle a live incident and create a postmortem report</li> </ul>"},{"location":"topics/Observability/#level-5-enterprise-observability-ai-based-monitoring","title":"Level 5: Enterprise Observability &amp; AI-Based Monitoring","text":"<ul> <li>Competencies: Machine Learning for Anomaly Detection, Large-Scale Tracing, Automated Infrastructure Health</li> <li>Tools: AI-Based Anomaly Detection, Kubernetes Observability, Cortex, New Relic, Datadog</li> <li>Checklist:</li> <li>[ ] Automate log analysis using AI-based anomaly detection</li> <li>[ ] Deploy observability for a large-scale Kubernetes cluster</li> <li>[ ] Implement self-healing infrastructure monitoring</li> </ul>"},{"location":"topics/Observability/#resources","title":"Resources","text":"<ul> <li>Prometheus Docs</li> <li>Grafana Labs</li> <li>OpenTelemetry</li> <li>ELK Stack Guide</li> </ul>"},{"location":"topics/Observability/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Project-Management/","title":"Project Management","text":"<p>Goal: Manage development tasks efficiently using modern project management and agile practices.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Project-Management/#level-1-fundamentals-of-task-management","title":"Level 1: Fundamentals of Task Management","text":"<ul> <li>Competencies: Task Breakdown, Prioritization, Time Tracking, Status Updates</li> <li>Tools: Jira, Trello, GitHub Issues, Kanban Boards, Eisenhower Matrix, Pomodoro</li> <li>Checklist:</li> <li>[ ] Break down a user story into smaller actionable tasks</li> <li>[ ] Use Eisenhower Matrix to prioritize urgent vs. important tasks</li> <li>[ ] Track time spent on development tasks</li> </ul>"},{"location":"topics/Project-Management/#level-2-sprint-planning-task-complexity","title":"Level 2: Sprint Planning &amp; Task Complexity","text":"<ul> <li>Competencies: Estimations, Task Assignment, Workload Balancing, Team Collaboration</li> <li>Tools: Sprint Planning, Story Points, Planning Poker, MoSCoW Prioritization</li> <li>Checklist:</li> <li>[ ] Estimate tasks using story points and Planning Poker</li> <li>[ ] Identify task complexity and break it down</li> <li>[ ] Balance task assignments across a team of developers</li> </ul>"},{"location":"topics/Project-Management/#level-3-risk-dependency-management","title":"Level 3: Risk &amp; Dependency Management","text":"<ul> <li>Competencies: Handling Blockers, Backlog Grooming, Agile Metrics</li> <li>Tools: Burndown Charts, Lead Time, Cycle Time, RAID Log</li> <li>Checklist:</li> <li>[ ] Identify and document task dependencies</li> <li>[ ] Handle a blocker that delays sprint completion</li> <li>[ ] Use Cycle Time and Lead Time to improve task efficiency</li> </ul>"},{"location":"topics/Project-Management/#level-4-scaling-agile-release-planning","title":"Level 4: Scaling Agile &amp; Release Planning","text":"<ul> <li>Competencies: CI/CD Pipelines, Deployment Planning, Cross-Team Collaboration</li> <li>Tools: Release Cycles, Feature Flags, Trunk-Based Development, Roadmaps</li> <li>Checklist:</li> <li>[ ] Plan a feature release with milestones</li> <li>[ ] Coordinate between backend, frontend, and QA teams</li> <li>[ ] Use feature flags for incremental releases</li> </ul>"},{"location":"topics/Project-Management/#level-5-engineering-leadership-strategic-planning","title":"Level 5: Engineering Leadership &amp; Strategic Planning","text":"<ul> <li>Competencies: Scaling Agile, Large-Scale Sprint Planning, Data-Driven Decision Making</li> <li>Tools: OKRs, DORA Metrics, SPACE Framework, Cumulative Flow Diagrams</li> <li>Checklist:</li> <li>[ ] Design a quarterly roadmap for an engineering team</li> <li>[ ] Optimize team workflow using DORA Metrics</li> <li>[ ] Define and improve developer experience metrics</li> </ul>"},{"location":"topics/Project-Management/#resources","title":"Resources","text":"<ul> <li>Jira Software Guide</li> <li>Agile Estimation Techniques</li> <li>DORA DevOps Metrics</li> </ul>"},{"location":"topics/Project-Management/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Redundancy-DR/","title":"Redundancy &amp; Disaster Recovery","text":"<p>Goal: Build resilient systems with backup, high availability, and automated recovery strategies.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Redundancy-DR/#level-1-basic-backup","title":"Level 1: Basic Backup","text":"<ul> <li>Competencies: Minimum viable protection from data loss.</li> <li>Tools: <code>pg_dump</code>, cron jobs, rsync, simple S3 uploads, any backup tool</li> <li>Checklist:</li> <li>[ ] Perform basic backup using any tool</li> </ul>"},{"location":"topics/Redundancy-DR/#level-2-automated-backups-monitoring","title":"Level 2: Automated Backups &amp; Monitoring","text":"<ul> <li>Competencies: Improved reliability and observability.</li> <li>Tools: pgBackRest, barman, restic, Prometheus + Alertmanager</li> <li>Checklist:</li> <li>[ ] Scheduled, incremental backups (e.g., WAL archiving for PostgreSQL)</li> <li>[ ] Monitoring backup success/failure (alerts if missed)</li> <li>[ ] Backup encryption and retention policy</li> <li>[ ] Manual restore plan tested occasionally</li> </ul>"},{"location":"topics/Redundancy-DR/#level-3-ha-high-availability","title":"Level 3: HA (High Availability)","text":"<ul> <li>Competencies: Avoid downtime with minimal data loss (RPO, RTO ~ minutes)</li> <li>Tools: PostgreSQL replication, Patroni, HAProxy, etcd, Ansible</li> <li>Checklist:</li> <li>[ ] Hot standby or streaming replication</li> <li>[ ] Automated failover (e.g., Patroni, repmgr)</li> <li>[ ] Load balancer or service discovery for DB connection routing</li> <li>[ ] Configuration and infrastructure as code</li> </ul>"},{"location":"topics/Redundancy-DR/#level-4-geo-redundancy-dr-planning","title":"Level 4: Geo-Redundancy &amp; DR Planning","text":"<ul> <li>Competencies: Survive full region failures</li> <li>Tools: Logical replication, pglogical, Citus, DNS failover</li> <li>Checklist:</li> <li>[ ] Cross-region replication (async or cascaded)</li> <li>[ ] Automated DNS failover (Route53, Cloudflare, etc.)</li> <li>[ ] Regular DR drills (simulate failure + restore)</li> <li>[ ] RTO &amp; RPO defined and measured</li> <li>[ ] App layer aware of region failover</li> </ul>"},{"location":"topics/Redundancy-DR/#level-5-fully-automated-self-healing-multi-region-active-active","title":"Level 5: Fully Automated Self-Healing &amp; Multi-Region Active-Active","text":"<ul> <li>Competencies: Always-on, resilient, self-healing infrastructure</li> <li>Tools: Citus, Kubernetes, Vault, Service Mesh, GitOps, Terraform</li> <li>Checklist:</li> <li>[ ] Multi-region active-active setup (e.g., sharded or conflict-resolved)</li> <li>[ ] Infrastructure self-heals on failure (k8s, operators)</li> <li>[ ] Continuous backup + PITR (Point-in-Time Recovery)</li> <li>[ ] Infrastructure &amp; DB schema versioned (e.g., GitOps)</li> </ul>"},{"location":"topics/Redundancy-DR/#resources","title":"Resources","text":"<ul> <li>PostgreSQL High Availability Guide</li> <li>Disaster Recovery Planning by AWS</li> <li>Citus Multi-Node Docs</li> </ul>"},{"location":"topics/Redundancy-DR/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Security/","title":"Security","text":"<p>Goal: Build secure systems with strong development and operational practices.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Security/#level-1-basic-security","title":"Level 1: Basic Security","text":"<ul> <li>Competencies: Understand and apply essential security practices to reduce obvious risks.</li> <li>Tools: Let's Encrypt, bcrypt, <code>.env</code> files, basic linters</li> <li>Checklist:</li> <li>[ ] HTTPS enabled (with valid TLS cert)</li> <li>[ ] Input validation (e.g., using basic html.EscapeString, etc.)</li> <li>[ ] Secure password storage (e.g., bcrypt)</li> <li>[ ] No secrets or credentials in code/repos</li> </ul>"},{"location":"topics/Security/#level-2-secure-development-practices","title":"Level 2: Secure Development Practices","text":"<ul> <li>Competencies: Develop with security in mind and address common OWASP risks.</li> <li>Tools: Go\u2019s security best practices, CSRF, ZAP, Snyk, Dependabot, HashiCorp Vault</li> <li>Checklist:</li> <li>[ ] Protection against OWASP Top 10 (XSS, CSRF, SQLi, etc.)</li> <li>[ ] Role-based access control (RBAC)</li> <li>[ ] Rate limiting / brute-force protection</li> <li>[ ] Secrets management system in place (e.g., Vault or SSM)</li> <li>[ ] Dependency vulnerability scanning</li> </ul>"},{"location":"topics/Security/#level-3-app-layer-threat-modeling-secure-sdlc","title":"Level 3: App Layer Threat Modeling &amp; Secure SDLC","text":"<ul> <li>Competencies: Build software with security embedded in the design and lifecycle.</li> <li>Tools: Keycloak, OPA, Gosec, OWASP ZAP, GitHub Actions security scans</li> <li>Checklist:</li> <li>[ ] Threat modeling done per service (e.g., STRIDE, DFD)</li> <li>[ ] Security testing integrated in CI/CD (SAST, DAST)</li> <li>[ ] Centralized authentication/authorization (OAuth2, OIDC, Keycloak)</li> <li>[ ] Logging/auditing of sensitive operations</li> <li>[ ] Input/output encoding via secure libraries</li> </ul>"},{"location":"topics/Security/#level-4-continuous-security-monitoring","title":"Level 4: Continuous Security &amp; Monitoring","text":"<ul> <li>Competencies: Detect and respond to threats in real-time, minimize attack window.</li> <li>Tools: Loki/Grafana, Alertmanager, Cloudflare WAF, Falco, Prometheus, JWT/mTLS</li> <li>Checklist:</li> <li>[ ] Centralized log aggregation (e.g., ELK/Promtail)</li> <li>[ ] Real-time alerting on anomalies and abuse patterns</li> <li>[ ] Web Application Firewall (WAF) in place</li> <li>[ ] API security tokens with expiry, rotation (JWT, mTLS)</li> <li>[ ] Security incidents documented and practiced (playbooks)</li> </ul>"},{"location":"topics/Security/#level-5-zero-trust-offensive-readiness","title":"Level 5: Zero Trust + Offensive Readiness","text":"<ul> <li>Competencies: Architect systems assuming compromise; proactively test and defend.</li> <li>Tools: Istio, Tailscale, OPA/Rego, Casbin, Burp Suite, SecurityScorecard, GCP/AWS Identity-Aware Proxy</li> <li>Checklist:</li> <li>[ ] Zero Trust architecture (identity-aware proxies, least privilege)</li> <li>[ ] Bug bounty / red teaming / penetration testing pipeline</li> <li>[ ] Secrets rotation automation + Just-in-Time access for any sensitive systems</li> <li>[ ] AI/ML anomaly detection for usage &amp; traffic using security tools and monitoring tools</li> </ul>"},{"location":"topics/Security/#resources","title":"Resources","text":"<ul> <li>OWASP Top Ten</li> <li>Go Security Best Practices</li> <li>GitHub Security Features</li> </ul>"},{"location":"topics/Security/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/System-Design/","title":"System Design","text":"<p>Goal: Master the design of scalable, reliable, and maintainable systems.</p> <p>Current Level: Level 1</p>"},{"location":"topics/System-Design/#level-1-system-design-fundamentals","title":"Level 1: System Design Fundamentals","text":"<ul> <li>Competencies:</li> <li>Client-server architecture</li> <li>Monolith vs microservices</li> <li>Basic API design</li> <li>Load balancing</li> <li>Caching</li> <li>Database selection</li> <li>Key Tools &amp; Practices:</li> <li>API documentation tools (Swagger, OpenAPI)</li> <li>Infrastructure diagrams</li> <li>HTTP clients (Postman, cURL)</li> <li>Resource estimation</li> <li>Vertical vs. horizontal scaling</li> <li>Checklist:</li> <li>[ ] Design a URL shortener service</li> <li>[ ] Design a notification system</li> <li>[ ] Implement a rate limiter</li> <li>[ ] Map out data flow diagrams for existing services</li> </ul>"},{"location":"topics/System-Design/#level-2-architecture-patterns-styles","title":"Level 2: Architecture Patterns &amp; Styles","text":"<ul> <li>Competencies:</li> <li>Microservices vs. SOA</li> <li>Layered architecture</li> <li>Event-driven architecture</li> <li>Hexagonal/clean/onion architectures</li> <li>BFF pattern</li> <li>CQRS basics</li> <li>Shared-nothing architecture</li> <li>Key Tools &amp; Practices:</li> <li>API gateways</li> <li>Diagram tools (C4 model)</li> <li>Event modeling</li> <li>Contract testing</li> <li>API versioning strategies</li> <li>Interface segregation</li> <li>Bounded contexts</li> <li>Checklist:</li> <li>[ ] Design a system using hexagonal architecture</li> <li>[ ] Implement a BFF for mobile and web clients</li> <li>[ ] Create an event-driven workflow</li> <li>[ ] Redesign a monolith toward service boundaries</li> </ul>"},{"location":"topics/System-Design/#level-3-distributed-systems","title":"Level 3: Distributed Systems","text":"<ul> <li>Competencies:</li> <li>Distributed transactions</li> <li>CQRS &amp; Event Sourcing</li> <li>Saga pattern</li> <li>Advanced message processing</li> <li>Consistent hashing</li> <li>Distributed caching</li> <li>Idempotency</li> <li>Key Tools &amp; Practices:</li> <li>Kafka for event streaming</li> <li>Redis/Memcached for distributed caching</li> <li>Distributed tracing (Jaeger, Zipkin)</li> <li>Optimistic concurrency control</li> <li>Backward/forward compatibility</li> <li>Data partitioning strategies</li> <li>Checklist:</li> <li>[ ] Design a payment system with Saga pattern</li> <li>[ ] Implement event sourcing for auditing</li> <li>[ ] Design a distributed file storage system</li> <li>[ ] Create a real-time analytics pipeline</li> </ul>"},{"location":"topics/System-Design/#level-4-large-scale-system-design","title":"Level 4: Large-Scale System Design","text":"<ul> <li>Competencies:</li> <li>Sharding strategies</li> <li>Replication patterns</li> <li>Content delivery</li> <li>Geospatial systems</li> <li>Rate limiting at scale</li> <li>Search architecture</li> <li>Streaming</li> <li>Key Tools &amp; Practices:</li> <li>Database sharding techniques</li> <li>CDN optimization</li> <li>Vector/similarity search</li> <li>Bloom filters</li> <li>Geospatial indexes</li> <li>Adaptive throttling</li> <li>Distributed consensus (Raft, Paxos)</li> <li>Checklist:</li> <li>[ ] Design a social media feed system</li> <li>[ ] Create a recommendation engine</li> <li>[ ] Design a large-scale chat application</li> <li>[ ] Implement a distributed search engine</li> </ul>"},{"location":"topics/System-Design/#level-5-enterprise-architecture","title":"Level 5: Enterprise Architecture","text":"<ul> <li>Competencies:</li> <li>Multi-region architectures</li> <li>Global data consistency</li> <li>Cross-region traffic</li> <li>Disaster recovery</li> <li>Custom distributed algorithms</li> <li>Platform design</li> <li>Migration strategies</li> <li>Key Tools &amp; Practices:</li> <li>Multi-region database solutions</li> <li>Global load balancing</li> <li>Chaos engineering</li> <li>Site reliability engineering</li> <li>Cost optimization</li> <li>Data sovereignty patterns</li> <li>Service mesh at scale</li> <li>Checklist:</li> <li>[ ] Design a global e-commerce platform</li> <li>[ ] Implement multi-region active-active architecture</li> <li>[ ] Create an internal service deployment platform</li> <li>[ ] Design zero-downtime system migration</li> </ul>"},{"location":"topics/System-Design/#resources","title":"Resources","text":"<ul> <li>System Design Primer (GitHub)</li> <li>Designing Data-Intensive Applications by Martin Kleppmann</li> <li>Awesome Scalability</li> </ul>"},{"location":"topics/System-Design/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Testing/","title":"Testing","text":"<p>Goal: Confidently test and validate software.</p> <p>Current Level: Level 1</p>"},{"location":"topics/Testing/#level-1-basic-testing","title":"Level 1: Basic Testing","text":"<ul> <li>Competencies: Understand the role of testing in Golang, write basic unit tests using the built-in testing package with table-driven tests, apply the arrange\u2013act\u2013assert pattern and use sub-tests, measure code coverage using <code>go test -cover</code>.</li> <li>Tools: Go\u2019s built-in testing package, <code>go test</code> command, basic assertion methods, optional use of Testify/assert</li> <li>Checklist:</li> <li>[ ] Write unit tests for simple utility functions</li> <li>[ ] Create table-driven tests covering various edge cases</li> <li>[ ] Configure and review code coverage reports using <code>go test -cover</code></li> </ul>"},{"location":"topics/Testing/#level-2-intermediate-testing","title":"Level 2: Intermediate Testing","text":"<ul> <li>Competencies: Develop integration tests for backend services (e.g., REST API handlers), test HTTP endpoints using <code>net/http/httptest</code>, use dependency injection to mock dependencies, start incorporating tests into CI.</li> <li>Tools: <code>httptest</code>, Testify/mock or GoMock, in-memory databases or test containers, GitHub Actions</li> <li>Checklist:</li> <li>[ ] Write integration tests for REST API endpoints and verify HTTP responses</li> <li>[ ] Use mocks to simulate external services</li> <li>[ ] Integrate tests into a CI pipeline with automated coverage reporting</li> </ul>"},{"location":"topics/Testing/#level-3-advanced-testing","title":"Level 3: Advanced Testing","text":"<ul> <li>Competencies: Implement table-driven tests for complex logic and concurrency, write benchmarks for backend performance, simulate load and detect race conditions, test middleware and error handling.</li> <li>Tools: <code>go test -race</code>, Go benchmarking, advanced Testify, GoMock or similar</li> <li>Checklist:</li> <li>[ ] Develop benchmarks for high-traffic API endpoints</li> <li>[ ] Write tests that simulate concurrent requests and identify race conditions</li> <li>[ ] Test custom middleware and simulate error scenarios</li> </ul>"},{"location":"topics/Testing/#level-4-expert-testing","title":"Level 4: Expert Testing","text":"<ul> <li>Competencies: Design end-to-end tests for distributed systems, use Docker-based test environments, verify async processing and inter-service communication.</li> <li>Tools: Docker, Docker Compose, testcontainers-go, integration frameworks, CI with multi-container support</li> <li>Checklist:</li> <li>[ ] Build an end-to-end test suite using Docker</li> <li>[ ] Simulate async processing and verify results</li> <li>[ ] Integrate comprehensive E2E tests within CI/CD</li> </ul>"},{"location":"topics/Testing/#level-5-master-testing","title":"Level 5: Master Testing","text":"<ul> <li>Competencies: Architect load and performance tests for Golang backends, integrate security/static analysis, apply chaos testing to assess resilience, mentor others on scalable testing.</li> <li>Tools: Go benchmarks, Vegeta, chaos tools, <code>golangci-lint</code>, CI/CD with performance dashboards</li> <li>Checklist:</li> <li>[ ] Develop load testing for real-world stress scenarios</li> <li>[ ] Incorporate automated security and static analysis into CI</li> <li>[ ] Lead testing optimization and mentoring initiatives</li> </ul>"},{"location":"topics/Testing/#resources","title":"Resources","text":"<ul> <li>Testing Trophy by Kent C. Dodds</li> <li>OWASP Testing Guide</li> <li>Awesome Testing</li> </ul>"},{"location":"topics/Testing/#personal-notes","title":"Personal Notes","text":""},{"location":"topics/Upskilling-Matrix/","title":"Upskilling Journey Matrix","text":"<p>This matrix outlines the progressive skill levels across key backend and DevOps topics.</p> Topic Level 0 Level 1 Level 2 Level 3 Level 4 Git &amp; GitHub Fundamentals: Init, Clone, Basic Commands, Branching Advanced Branching, Rebasing, Merge Strategies Recovery, Security, CI/CD, GitHub Actions GitOps, Enterprise Git Strategies, Large Codebases Deep Git Internals, Large-Scale GitOps, Custom Automation Project Management Task Breakdown, Basic Prioritization, Time Tracking Sprint Planning, Story Points, Task Complexity, Team Collaboration Risk Management, Dependency Handling, Backlog Grooming Cross-Team Collaboration, Release Planning, Scaling Agile Large-Scale Planning, Engineering Leadership, Metrics-Driven Decisions Communication &amp; Collaboration Basic Team Communication, Standups, Async Updates Writing Clear PRs, Giving &amp; Receiving Feedback, Meeting Etiquette Client &amp; Cross-Team Collaboration, Conflict Resolution Knowledge Sharing, Mentorship, Public Speaking, Documentation Mastery Leadership Communication, Technical Writing, Developer Advocacy Leadership To be added\u2026 Documentation To be added\u2026 Containers &amp; Orchestration Docker Basics: Images, Containers, Volumes Docker Compose, Networking, Storage, Registries Kubernetes Basics, Swarm, Helm, CI/CD Pipelines Kubernetes Advanced: Scaling, Security, Observability Enterprise Kubernetes: Multi-Cluster, Custom Operators Linux Linux CLI Basics, Filesystem Navigation, Permissions Package Managers, Shell Scripting, System Monitoring, WSL Process Management, Server Management, Bash Automation Virtualization, Containerization, Security Hardening Kernel Customization, Infra as Code, Large-Scale Automation CI/CD Basics of CI/CD, GitHub Actions, YAML Pipelines Automated Testing, Deployment Pipelines Secure CI/CD Pipelines, Terraform (Optional) Multi-Environment Pipelines, Self-Hosted Runners Enterprise CI/CD, Full Infra Automation Observability Observability Logging, Metrics, Application Monitoring Centralized Logging, ELK, Prometheus Full Observability Stack, OpenTelemetry, Alerting AI-Based Monitoring, Infra Health Automation Redundancy &amp; DR Basic Backup Automated Backups &amp; Monitoring HA (High Availability) DR Planning Self-Healing, Multi-Region Active-Active Networking OSI model, TCP/IP, Subnet, HTTP, ping, traceroute DNS, Load Balancing, VPN, Proxy SSL/TLS, API Gateways, SDN, VPC/Subnet K8s Network Models, Service Mesh, Zero Trust Multi-cloud, Custom Protocols, Global Traffic Mgmt Code + Design Patterns Backend Lang + Data Structures, Idiomatic Code Classic Patterns, Clean Code, Modularity Advanced Problem Solving, Leetcode Medium+ Code Quality Reviews, Long-Term Maintainability Org-wide Architecture &amp; Best Practices Databases SQL, Redis, Elasticsearch, Qdrant Fundamentals Schema Design, Indexing, Expiration Strategies CTEs, Triggers, Aggs, Streaming, Rate Limiting Read/Write Replication, Multi-layered Caching, TLS tuning Distributed DBs, Monitoring, Multimodal Search, Multi-Region System Design Monolith vs Microservices, Load Balancing, Caching Architecture Patterns, CQRS, BFF, Shared-Nothing Distributed Systems, Saga, Event Sourcing Sharding, Geospatial, Streaming Systems Multi-Region, Global Consistency, Custom Algorithms Security Basic Security Practices Secure Dev Practices App Layer Threat Modeling, Secure SDLC Continuous Security &amp; Monitoring Zero Trust, Offensive Readiness API HTTP Basics, REST API, Tools Versioning, Validation, Pagination GraphQL, gRPC, Protofiles Tokens, Gateways, RBAC, Rate Limits Federated APIs, Lifecycle Mgmt, Multi-Team Compatibility Auth &amp; Authorization Auth vs AuthZ, Cookies, Sessions, Hashing Session Mgmt, RBAC JWT, OAuth2, Scopes SSO, OAuth2, MFA, Protocols Passwordless, WebAuthn, Zero-Trust, Logging Testing Unit Testing, Table-Driven Tests, Coverage Integration Tests, HTTP Simulation, CI Complex Tests, Benchmarks, Middleware End-to-End Tests, Container-based Integration Performance, Security, Chaos Testing"}]}